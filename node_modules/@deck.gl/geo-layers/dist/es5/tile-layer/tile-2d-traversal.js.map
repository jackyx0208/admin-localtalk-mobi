{"version":3,"sources":["../../../src/tile-layer/tile-2d-traversal.js"],"names":["TILE_SIZE","MAX_MAPS","REF_POINTS_5","REF_POINTS_9","concat","OSMNode","x","y","z","params","viewport","cullingVolume","elevationBounds","minZ","maxZ","offset","project","boundingVolume","getBoundingVolume","isInside","computeVisibility","childVisible","distance","distanceTo","cameraPosition","scale","height","Math","floor","log2","selected","children","child","update","result","push","_children","node","getSelected","zRange","worldOffset","refPoints","refPointPositions","p","lngLat","pow","extent","originX","originY","AxisAlignedBoundingBox","getOSMTileIndices","resolution","projectPosition","planes","Object","values","getFrustumPlanes","map","normal","Plane","clone","negate","CullingVolume","unitsPerMeter","distanceScales","elevationMin","elevationMax","pitch","root","traversalParams","subViewports","length"],"mappings":"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","sourcesContent":["/* eslint-disable complexity */\nimport {\n  CullingVolume,\n  Plane,\n  AxisAlignedBoundingBox,\n  makeOrientedBoundingBoxFromPoints\n} from '@math.gl/culling';\nimport {osmTile2lngLat} from './utils';\n\nconst TILE_SIZE = 512;\n// number of world copies to check\nconst MAX_MAPS = 3;\n// for calculating bounding volume of a tile in a non-web-mercator viewport\nconst REF_POINTS_5 = [[0.5, 0.5], [0, 0], [0, 1], [1, 0], [1, 1]]; // 4 corners and center\nconst REF_POINTS_9 = REF_POINTS_5.concat([[0, 0.5], [0.5, 0], [1, 0.5], [0.5, 1]]); // 4 corners, center and 4 mid points\n\nclass OSMNode {\n  constructor(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  get children() {\n    if (!this._children) {\n      const x = this.x * 2;\n      const y = this.y * 2;\n      const z = this.z + 1;\n      this._children = [\n        new OSMNode(x, y, z),\n        new OSMNode(x, y + 1, z),\n        new OSMNode(x + 1, y, z),\n        new OSMNode(x + 1, y + 1, z)\n      ];\n    }\n    return this._children;\n  }\n\n  update(params) {\n    const {viewport, cullingVolume, elevationBounds, minZ, maxZ, offset, project} = params;\n    const boundingVolume = this.getBoundingVolume(elevationBounds, offset, project);\n\n    // First, check if this tile is visible\n    const isInside = cullingVolume.computeVisibility(boundingVolume);\n    if (isInside < 0) {\n      return false;\n    }\n\n    // Avoid loading overlapping tiles - if a descendant is requested, do not request the ancester\n    if (!this.childVisible) {\n      let {z} = this;\n      if (z < maxZ && z >= minZ) {\n        // Adjust LOD\n        // If the tile is far enough from the camera, accept a lower zoom level\n        const distance =\n          (boundingVolume.distanceTo(viewport.cameraPosition) * viewport.scale) / viewport.height;\n        z += Math.floor(Math.log2(distance));\n      }\n      if (z >= maxZ) {\n        // LOD is acceptable\n        this.selected = true;\n        return true;\n      }\n    }\n\n    // LOD is not enough, recursively test child tiles\n    this.selected = false;\n    this.childVisible = true;\n    for (const child of this.children) {\n      child.update(params);\n    }\n    return true;\n  }\n\n  getSelected(result = []) {\n    if (this.selected) {\n      result.push(this);\n    }\n    if (this._children) {\n      for (const node of this._children) {\n        node.getSelected(result);\n      }\n    }\n    return result;\n  }\n\n  getBoundingVolume(zRange, worldOffset, project) {\n    if (project) {\n      // Custom projection\n      // Estimate bounding box from sample points\n      // At low zoom level we need more samples to calculate the bounding volume correctly\n      const refPoints = this.z < 2 ? REF_POINTS_9 : REF_POINTS_5;\n\n      // Convert from tile-relative coordinates to common space\n      const refPointPositions = [];\n      for (const p of refPoints) {\n        const lngLat = osmTile2lngLat(this.x + p[0], this.y + p[1], this.z);\n        lngLat[2] = zRange[0];\n        refPointPositions.push(project(lngLat));\n\n        if (zRange[0] !== zRange[1]) {\n          // Account for the elevation volume\n          lngLat[2] = zRange[1];\n          refPointPositions.push(project(lngLat));\n        }\n      }\n\n      return makeOrientedBoundingBoxFromPoints(refPointPositions);\n    }\n\n    // Use WebMercator projection\n    const scale = Math.pow(2, this.z);\n    const extent = TILE_SIZE / scale;\n    const originX = this.x * extent + worldOffset * TILE_SIZE;\n    // deck's common space is y-flipped\n    const originY = TILE_SIZE - (this.y + 1) * extent;\n\n    return new AxisAlignedBoundingBox(\n      [originX, originY, zRange[0]],\n      [originX + extent, originY + extent, zRange[1]]\n    );\n  }\n}\n\nexport function getOSMTileIndices(viewport, maxZ, zRange) {\n  const project = viewport.resolution ? viewport.projectPosition : null;\n\n  // Get the culling volume of the current camera\n  const planes = Object.values(viewport.getFrustumPlanes()).map(\n    ({normal, distance}) => new Plane(normal.clone().negate(), distance)\n  );\n  const cullingVolume = new CullingVolume(planes);\n\n  // Project zRange from meters to common space\n  const unitsPerMeter = viewport.distanceScales.unitsPerMeter[2];\n  const elevationMin = (zRange && zRange[0] * unitsPerMeter) || 0;\n  const elevationMax = (zRange && zRange[1] * unitsPerMeter) || 0;\n\n  // Always load at the current zoom level if pitch is small\n  const minZ = viewport.pitch <= 60 ? maxZ : 0;\n\n  const root = new OSMNode(0, 0, 0);\n  const traversalParams = {\n    viewport,\n    project,\n    cullingVolume,\n    elevationBounds: [elevationMin, elevationMax],\n    minZ,\n    maxZ,\n    // num. of worlds from the center. For repeated maps\n    offset: 0\n  };\n\n  root.update(traversalParams);\n\n  if (viewport.subViewports && viewport.subViewports.length > 1) {\n    // Check worlds in repeated maps\n    traversalParams.offset = -1;\n    while (root.update(traversalParams)) {\n      if (--traversalParams.offset < -MAX_MAPS) {\n        break;\n      }\n    }\n    traversalParams.offset = 1;\n    while (root.update(traversalParams)) {\n      if (++traversalParams.offset > MAX_MAPS) {\n        break;\n      }\n    }\n  }\n\n  return root.getSelected();\n}\n"],"file":"tile-2d-traversal.js"}