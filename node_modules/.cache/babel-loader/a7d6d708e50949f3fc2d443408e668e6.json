{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(react+node)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\animate\\\\MotionInView.js\";\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { motion, useAnimation } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer'; // material\n\nimport { Box } from '@material-ui/core'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMotionInView.propTypes = {\n  children: PropTypes.node,\n  variants: PropTypes.object,\n  transition: PropTypes.object,\n  triggerOnce: PropTypes.bool,\n  threshold: PropTypes.oneOfType([PropTypes.number, PropTypes.array])\n};\nexport default function MotionInView({\n  children,\n  variants,\n  transition,\n  threshold,\n  ...other\n}) {\n  const controls = useAnimation();\n  const [ref, inView] = useInView({\n    threshold: threshold || 0,\n    triggerOnce: true\n  });\n  useEffect(() => {\n    if (inView) {\n      controls.start(Object.keys(variants)[1]);\n    } else {\n      controls.start(Object.keys(variants)[0]);\n    }\n  }, [controls, inView, variants]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    ref: ref,\n    component: motion.div,\n    initial: Object.keys(variants)[0],\n    animate: controls,\n    variants: variants,\n    transition: transition,\n    ...other,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi(react+node)/pro/toptalk-adminpanel/src/components/animate/MotionInView.js"],"names":["PropTypes","useEffect","motion","useAnimation","useInView","Box","MotionInView","propTypes","children","node","variants","object","transition","triggerOnce","bool","threshold","oneOfType","number","array","other","controls","ref","inView","start","Object","keys","div"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,eAArC;AACA,SAASC,SAAT,QAA0B,6BAA1B,C,CACA;;AACA,SAASC,GAAT,QAAoB,mBAApB,C,CAEA;;;AAEAC,YAAY,CAACC,SAAb,GAAyB;AACvBC,EAAAA,QAAQ,EAAER,SAAS,CAACS,IADG;AAEvBC,EAAAA,QAAQ,EAAEV,SAAS,CAACW,MAFG;AAGvBC,EAAAA,UAAU,EAAEZ,SAAS,CAACW,MAHC;AAIvBE,EAAAA,WAAW,EAAEb,SAAS,CAACc,IAJA;AAKvBC,EAAAA,SAAS,EAAEf,SAAS,CAACgB,SAAV,CAAoB,CAAChB,SAAS,CAACiB,MAAX,EAAmBjB,SAAS,CAACkB,KAA7B,CAApB;AALY,CAAzB;AAQA,eAAe,SAASZ,YAAT,CAAsB;AAAEE,EAAAA,QAAF;AAAYE,EAAAA,QAAZ;AAAsBE,EAAAA,UAAtB;AAAkCG,EAAAA,SAAlC;AAA6C,KAAGI;AAAhD,CAAtB,EAA+E;AAC5F,QAAMC,QAAQ,GAAGjB,YAAY,EAA7B;AACA,QAAM,CAACkB,GAAD,EAAMC,MAAN,IAAgBlB,SAAS,CAAC;AAC9BW,IAAAA,SAAS,EAAEA,SAAS,IAAI,CADM;AAE9BF,IAAAA,WAAW,EAAE;AAFiB,GAAD,CAA/B;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIqB,MAAJ,EAAY;AACVF,MAAAA,QAAQ,CAACG,KAAT,CAAeC,MAAM,CAACC,IAAP,CAAYf,QAAZ,EAAsB,CAAtB,CAAf;AACD,KAFD,MAEO;AACLU,MAAAA,QAAQ,CAACG,KAAT,CAAeC,MAAM,CAACC,IAAP,CAAYf,QAAZ,EAAsB,CAAtB,CAAf;AACD;AACF,GANQ,EAMN,CAACU,QAAD,EAAWE,MAAX,EAAmBZ,QAAnB,CANM,CAAT;AAQA,sBACE,QAAC,GAAD;AACE,IAAA,GAAG,EAAEW,GADP;AAEE,IAAA,SAAS,EAAEnB,MAAM,CAACwB,GAFpB;AAGE,IAAA,OAAO,EAAEF,MAAM,CAACC,IAAP,CAAYf,QAAZ,EAAsB,CAAtB,CAHX;AAIE,IAAA,OAAO,EAAEU,QAJX;AAKE,IAAA,QAAQ,EAAEV,QALZ;AAME,IAAA,UAAU,EAAEE,UANd;AAAA,OAOMO,KAPN;AAAA,cASGX;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useEffect } from 'react';\r\nimport { motion, useAnimation } from 'framer-motion';\r\nimport { useInView } from 'react-intersection-observer';\r\n// material\r\nimport { Box } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nMotionInView.propTypes = {\r\n  children: PropTypes.node,\r\n  variants: PropTypes.object,\r\n  transition: PropTypes.object,\r\n  triggerOnce: PropTypes.bool,\r\n  threshold: PropTypes.oneOfType([PropTypes.number, PropTypes.array])\r\n};\r\n\r\nexport default function MotionInView({ children, variants, transition, threshold, ...other }) {\r\n  const controls = useAnimation();\r\n  const [ref, inView] = useInView({\r\n    threshold: threshold || 0,\r\n    triggerOnce: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (inView) {\r\n      controls.start(Object.keys(variants)[1]);\r\n    } else {\r\n      controls.start(Object.keys(variants)[0]);\r\n    }\r\n  }, [controls, inView, variants]);\r\n\r\n  return (\r\n    <Box\r\n      ref={ref}\r\n      component={motion.div}\r\n      initial={Object.keys(variants)[0]}\r\n      animate={controls}\r\n      variants={variants}\r\n      transition={transition}\r\n      {...other}\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}