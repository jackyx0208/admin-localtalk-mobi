{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(back)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\_dashboard\\\\blocklimitedwords\\\\BlockLimitedWordNewForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useCallback } from 'react';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik'; // material\n\nimport { LoadingButton } from '@material-ui/lab';\nimport { Box, Card, Grid, Stack, Switch, TextField, Typography, FormHelperText, FormControlLabel } from '@material-ui/core'; // utils\n\nimport axios from '../../../utils/axios';\nimport { fData } from '../../../utils/formatNumber';\nimport fakeRequest from '../../../utils/fakeRequest'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n\nimport Label from '../../Label';\nimport { UploadAvatar } from '../../upload'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nBlockLimitedWordNewForm.propTypes = {\n  isEdit: PropTypes.bool,\n  currentWord: PropTypes.object\n};\nexport default function BlockLimitedWordNewForm({\n  isEdit,\n  currentWord\n}) {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const NewUserSchema = Yup.object().shape({\n    word: Yup.string().required('Word is required') // replacewith: Yup.string().required('ReplaceWith is required')\n\n  });\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      word: (currentWord === null || currentWord === void 0 ? void 0 : currentWord.word) || '',\n      replacewith: (currentWord === null || currentWord === void 0 ? void 0 : currentWord.replacewith) || ''\n    },\n    validationSchema: NewUserSchema,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm,\n      setErrors\n    }) => {\n      try {\n        await fakeRequest(500);\n\n        if (!isEdit) {\n          await axios.post('/block-limited-words/', values);\n        } else {\n          await axios.put(`/block-limited-words?word=${currentWord === null || currentWord === void 0 ? void 0 : currentWord.word}`, values);\n        }\n\n        resetForm();\n        setSubmitting(false);\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', {\n          variant: 'success'\n        });\n        navigate(PATH_DASHBOARD.blocklimitedwords.list);\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 8,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 3,\n              children: [/*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Block Limited Word\",\n                  ...getFieldProps('word'),\n                  error: Boolean(touched.word && errors.word),\n                  helperText: touched.word && errors.word\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 85,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Box, {\n                sx: {\n                  mt: 3,\n                  display: 'flex',\n                  justifyContent: 'flex-end'\n                },\n                children: /*#__PURE__*/_jsxDEV(LoadingButton, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  loading: isSubmitting,\n                  children: !isEdit ? 'Create Block Limited Word' : 'Save Changes'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 103,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BlockLimitedWordNewForm, \"ShlbACjtCU8GDduOfYBiimtQsaY=\", false, function () {\n  return [useNavigate, useSnackbar, useFormik];\n});\n\n_c = BlockLimitedWordNewForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlockLimitedWordNewForm\");","map":{"version":3,"sources":["E:/projects/localtalk.mobi(back)/pro/toptalk-adminpanel/src/components/_dashboard/blocklimitedwords/BlockLimitedWordNewForm.js"],"names":["Yup","PropTypes","useCallback","useSnackbar","useNavigate","Form","FormikProvider","useFormik","LoadingButton","Box","Card","Grid","Stack","Switch","TextField","Typography","FormHelperText","FormControlLabel","axios","fData","fakeRequest","PATH_DASHBOARD","Label","UploadAvatar","BlockLimitedWordNewForm","propTypes","isEdit","bool","currentWord","object","navigate","enqueueSnackbar","NewUserSchema","shape","word","string","required","formik","enableReinitialize","initialValues","replacewith","validationSchema","onSubmit","values","setSubmitting","resetForm","setErrors","post","put","variant","blocklimitedwords","list","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","p","xs","sm","Boolean","mt","display","justifyContent"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useCallback } from 'react';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n// material\r\nimport { LoadingButton } from '@material-ui/lab';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Grid,\r\n  Stack,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n  FormHelperText,\r\n  FormControlLabel\r\n} from '@material-ui/core';\r\n// utils\r\nimport axios from '../../../utils/axios';\r\nimport { fData } from '../../../utils/formatNumber';\r\nimport fakeRequest from '../../../utils/fakeRequest';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport Label from '../../Label';\r\nimport { UploadAvatar } from '../../upload';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nBlockLimitedWordNewForm.propTypes = {\r\n  isEdit: PropTypes.bool,\r\n  currentWord: PropTypes.object\r\n};\r\n\r\nexport default function BlockLimitedWordNewForm({ isEdit, currentWord }) {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const NewUserSchema = Yup.object().shape({\r\n    word: Yup.string().required('Word is required')\r\n    // replacewith: Yup.string().required('ReplaceWith is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      word: currentWord?.word || '',\r\n      replacewith: currentWord?.replacewith || ''\r\n    },\r\n    validationSchema: NewUserSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\r\n      try {\r\n        await fakeRequest(500);\r\n\r\n        if (!isEdit) {\r\n          await axios.post('/block-limited-words/', values);\r\n        } else {\r\n          await axios.put(`/block-limited-words?word=${currentWord?.word}`, values);\r\n        }\r\n\r\n        resetForm();\r\n        setSubmitting(false);\r\n        enqueueSnackbar(!isEdit ? 'Create success' : 'Update success', { variant: 'success' });\r\n        navigate(PATH_DASHBOARD.blocklimitedwords.list);\r\n      } catch (error) {\r\n        console.error(error);\r\n        setSubmitting(false);\r\n        setErrors(error);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={8}>\r\n            <Card sx={{ p: 3 }}>\r\n              <Stack spacing={3}>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Block Limited Word\"\r\n                    {...getFieldProps('word')}\r\n                    error={Boolean(touched.word && errors.word)}\r\n                    helperText={touched.word && errors.word}\r\n                  />\r\n\r\n                  {/* <TextField\r\n                    fullWidth\r\n                    label=\"Replace With\"\r\n                    {...getFieldProps('replacewith')}\r\n                    error={Boolean(touched.replacewith && errors.replacewith)}\r\n                    helperText={touched.replacewith && errors.replacewith}\r\n                  /> */}\r\n                </Stack>\r\n\r\n                <Box sx={{ mt: 3, display: 'flex', justifyContent: 'flex-end' }}>\r\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n                    {!isEdit ? 'Create Block Limited Word' : 'Save Changes'}\r\n                  </LoadingButton>\r\n                </Box>\r\n              </Stack>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}