{"ast":null,"code":"import _slicedToArray from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{findIndex}from'lodash';import{useEffect,useState,useRef}from'react';//\nimport Scrollbar from'../../Scrollbar';import LightboxModal from'../../LightboxModal';import ChatMessageItem from'./ChatMessageItem';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ChatMessageList(_ref){var conversation=_ref.conversation;var scrollRef=useRef();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),openLightbox=_useState2[0],setOpenLightbox=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),selectedImage=_useState4[0],setSelectedImage=_useState4[1];useEffect(function(){var scrollMessagesToBottom=function scrollMessagesToBottom(){if(scrollRef.current){scrollRef.current.scrollTop=scrollRef.current.scrollHeight;}};scrollMessagesToBottom();},[conversation.messages]);var images=conversation.messages.filter(function(messages){return messages.contentType==='image';}).map(function(messages){return messages.body;});var handleOpenLightbox=function handleOpenLightbox(url){var selectedImage=findIndex(images,function(index){return index===url;});setOpenLightbox(true);setSelectedImage(selectedImage);};return/*#__PURE__*/_jsxs(Scrollbar,{scrollableNodeProps:{ref:scrollRef},sx:{p:3,flexGrow:1},children:[conversation.messages.map(function(message){return/*#__PURE__*/_jsx(ChatMessageItem,{message:message,conversation:conversation,onOpenLightbox:handleOpenLightbox},message._id);}),/*#__PURE__*/_jsx(LightboxModal,{images:images,photoIndex:selectedImage,setPhotoIndex:setSelectedImage,isOpen:openLightbox,onClose:function onClose(){return setOpenLightbox(false);}})]});}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/_dashboard/chat/ChatMessageList.js"],"names":["findIndex","useEffect","useState","useRef","Scrollbar","LightboxModal","ChatMessageItem","ChatMessageList","conversation","scrollRef","openLightbox","setOpenLightbox","selectedImage","setSelectedImage","scrollMessagesToBottom","current","scrollTop","scrollHeight","messages","images","filter","contentType","map","body","handleOpenLightbox","url","index","ref","p","flexGrow","message","_id"],"mappings":"uKACA,OAASA,SAAT,KAA0B,QAA1B,CACA,OAASC,SAAT,CAAoBC,QAApB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA;AACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,MAAOC,CAAAA,aAAP,KAA0B,qBAA1B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAEA;wFAMA,cAAe,SAASC,CAAAA,eAAT,MAA2C,IAAhBC,CAAAA,YAAgB,MAAhBA,YAAgB,CACxD,GAAMC,CAAAA,SAAS,CAAGN,MAAM,EAAxB,CACA,cAAwCD,QAAQ,CAAC,KAAD,CAAhD,wCAAOQ,YAAP,eAAqBC,eAArB,eACA,eAA0CT,QAAQ,CAAC,IAAD,CAAlD,yCAAOU,aAAP,eAAsBC,gBAAtB,eAEAZ,SAAS,CAAC,UAAM,CACd,GAAMa,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CACnC,GAAIL,SAAS,CAACM,OAAd,CAAuB,CACrBN,SAAS,CAACM,OAAV,CAAkBC,SAAlB,CAA8BP,SAAS,CAACM,OAAV,CAAkBE,YAAhD,CACD,CACF,CAJD,CAKAH,sBAAsB,GACvB,CAPQ,CAON,CAACN,YAAY,CAACU,QAAd,CAPM,CAAT,CASA,GAAMC,CAAAA,MAAM,CAAGX,YAAY,CAACU,QAAb,CACZE,MADY,CACL,SAACF,QAAD,QAAcA,CAAAA,QAAQ,CAACG,WAAT,GAAyB,OAAvC,EADK,EAEZC,GAFY,CAER,SAACJ,QAAD,QAAcA,CAAAA,QAAQ,CAACK,IAAvB,EAFQ,CAAf,CAIA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,GAAD,CAAS,CAClC,GAAMb,CAAAA,aAAa,CAAGZ,SAAS,CAACmB,MAAD,CAAS,SAACO,KAAD,QAAWA,CAAAA,KAAK,GAAKD,GAArB,EAAT,CAA/B,CACAd,eAAe,CAAC,IAAD,CAAf,CACAE,gBAAgB,CAACD,aAAD,CAAhB,CACD,CAJD,CAMA,mBACE,MAAC,SAAD,EAAW,mBAAmB,CAAE,CAAEe,GAAG,CAAElB,SAAP,CAAhC,CAAoD,EAAE,CAAE,CAAEmB,CAAC,CAAE,CAAL,CAAQC,QAAQ,CAAE,CAAlB,CAAxD,WACGrB,YAAY,CAACU,QAAb,CAAsBI,GAAtB,CAA0B,SAACQ,OAAD,qBACzB,KAAC,eAAD,EAEE,OAAO,CAAEA,OAFX,CAGE,YAAY,CAAEtB,YAHhB,CAIE,cAAc,CAAEgB,kBAJlB,EACOM,OAAO,CAACC,GADf,CADyB,EAA1B,CADH,cAUE,KAAC,aAAD,EACE,MAAM,CAAEZ,MADV,CAEE,UAAU,CAAEP,aAFd,CAGE,aAAa,CAAEC,gBAHjB,CAIE,MAAM,CAAEH,YAJV,CAKE,OAAO,CAAE,yBAAMC,CAAAA,eAAe,CAAC,KAAD,CAArB,EALX,EAVF,GADF,CAoBD","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { findIndex } from 'lodash';\r\nimport { useEffect, useState, useRef } from 'react';\r\n//\r\nimport Scrollbar from '../../Scrollbar';\r\nimport LightboxModal from '../../LightboxModal';\r\nimport ChatMessageItem from './ChatMessageItem';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatMessageList.propTypes = {\r\n  conversation: PropTypes.object.isRequired\r\n};\r\n\r\nexport default function ChatMessageList({ conversation }) {\r\n  const scrollRef = useRef();\r\n  const [openLightbox, setOpenLightbox] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const scrollMessagesToBottom = () => {\r\n      if (scrollRef.current) {\r\n        scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\r\n      }\r\n    };\r\n    scrollMessagesToBottom();\r\n  }, [conversation.messages]);\r\n\r\n  const images = conversation.messages\r\n    .filter((messages) => messages.contentType === 'image')\r\n    .map((messages) => messages.body);\r\n\r\n  const handleOpenLightbox = (url) => {\r\n    const selectedImage = findIndex(images, (index) => index === url);\r\n    setOpenLightbox(true);\r\n    setSelectedImage(selectedImage);\r\n  };\r\n\r\n  return (\r\n    <Scrollbar scrollableNodeProps={{ ref: scrollRef }} sx={{ p: 3, flexGrow: 1 }}>\r\n      {conversation.messages.map((message) => (\r\n        <ChatMessageItem\r\n          key={message._id}\r\n          message={message}\r\n          conversation={conversation}\r\n          onOpenLightbox={handleOpenLightbox}\r\n        />\r\n      ))}\r\n\r\n      <LightboxModal\r\n        images={images}\r\n        photoIndex={selectedImage}\r\n        setPhotoIndex={setSelectedImage}\r\n        isOpen={openLightbox}\r\n        onClose={() => setOpenLightbox(false)}\r\n      />\r\n    </Scrollbar>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}