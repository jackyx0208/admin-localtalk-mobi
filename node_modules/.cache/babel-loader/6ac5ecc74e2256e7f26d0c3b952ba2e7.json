{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(back)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\_dashboard\\\\chat\\\\ChatMessageInput.js\",\n    _s = $RefreshSig$();\n\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport { Icon } from '@iconify/react';\nimport { useRef, useState } from 'react';\nimport micFill from '@iconify/icons-eva/mic-fill';\nimport roundSend from '@iconify/icons-ic/round-send';\nimport attach2Fill from '@iconify/icons-eva/attach-2-fill';\nimport roundAddPhotoAlternate from '@iconify/icons-ic/round-add-photo-alternate'; // material\n\nimport { styled } from '@material-ui/core/styles';\nimport { Input, Divider, IconButton, InputAdornment, Stack } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport { addRecipients, onSendMessage, getConversation, getParticipants, markConversationAsRead, resetActiveConversation } from '../../../redux/slices/chat';\nimport axios from '../../../utils/axios'; // hooks\n\nimport useAuth from '../../../hooks/useAuth'; //\n\nimport EmojiPicker from '../../EmojiPicker'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled('div')(({\n  theme\n}) => ({\n  minHeight: 56,\n  display: 'flex',\n  position: 'relative',\n  alignItems: 'center',\n  paddingLeft: theme.spacing(2)\n})); // ----------------------------------------------------------------------\n\nChatMessageInput.propTypes = {\n  disabled: PropTypes.bool,\n  conversationId: PropTypes.string,\n  onSend: PropTypes.func\n};\nexport default function ChatMessageInput({\n  disabled,\n  conversationId,\n  onSend,\n  conversationKey,\n  ...other\n}) {\n  _s();\n\n  const dispatch = useDispatch();\n  const fileInputRef = useRef(null);\n  const [message, setMessage] = useState('');\n  const {\n    user\n  } = useAuth();\n\n  const handleAttach = () => {\n    fileInputRef.current.click();\n  };\n\n  const handleChangeMessage = event => {\n    setMessage(event.target.value);\n  };\n\n  const handleKeyUp = event => {\n    if (event.key === 'Enter') {\n      handleSend();\n    }\n  };\n\n  const handleSend = async () => {\n    if (!message) {\n      return '';\n    }\n\n    if (onSend) {\n      const accessToken = window.localStorage.getItem('accessToken');\n      const authHeader = {\n        headers: {\n          Authorization: `Bearer ${accessToken}`\n        }\n      };\n      onSend({\n        conversationId,\n        messageId: uuidv4(),\n        message,\n        contentType: 'text',\n        attachments: [],\n        createdAt: new Date(),\n        senderId: user\n      });\n      const resp = await axios.post('/chat/messages/new', {\n        conversationId,\n        attachments: [],\n        message,\n        conversationKey\n      }, authHeader);\n      dispatch(getConversation(resp.data.conversationKey));\n    }\n\n    return setMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(RootStyle, { ...other,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      disabled: disabled,\n      fullWidth: true,\n      value: message,\n      disableUnderline: true,\n      onKeyUp: handleKeyUp,\n      onChange: handleChangeMessage,\n      placeholder: \"Type a message\",\n      startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n        position: \"start\",\n        children: /*#__PURE__*/_jsxDEV(EmojiPicker, {\n          disabled: disabled,\n          value: message,\n          setValue: setMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this),\n      sx: {\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      orientation: \"vertical\",\n      flexItem: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n      color: \"primary\",\n      disabled: !message,\n      onClick: handleSend,\n      sx: {\n        mx: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        icon: roundSend,\n        width: 24,\n        height: 24\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      ref: fileInputRef,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChatMessageInput, \"owcMwVytko3ijp9IKdPRGCtUwAQ=\", false, function () {\n  return [useDispatch, useAuth];\n});\n\n_c = ChatMessageInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatMessageInput\");","map":{"version":3,"sources":["E:/projects/localtalk.mobi(back)/pro/toptalk-adminpanel/src/components/_dashboard/chat/ChatMessageInput.js"],"names":["v4","uuidv4","PropTypes","Icon","useRef","useState","micFill","roundSend","attach2Fill","roundAddPhotoAlternate","styled","Input","Divider","IconButton","InputAdornment","Stack","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","axios","useAuth","EmojiPicker","RootStyle","theme","minHeight","display","position","alignItems","paddingLeft","spacing","ChatMessageInput","propTypes","disabled","bool","conversationId","string","onSend","func","conversationKey","other","dispatch","fileInputRef","message","setMessage","user","handleAttach","current","click","handleChangeMessage","event","target","value","handleKeyUp","key","handleSend","accessToken","window","localStorage","getItem","authHeader","headers","Authorization","messageId","contentType","attachments","createdAt","Date","senderId","resp","post","data","height","mx"],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport { Icon } from '@iconify/react';\r\nimport { useRef, useState } from 'react';\r\nimport micFill from '@iconify/icons-eva/mic-fill';\r\nimport roundSend from '@iconify/icons-ic/round-send';\r\nimport attach2Fill from '@iconify/icons-eva/attach-2-fill';\r\nimport roundAddPhotoAlternate from '@iconify/icons-ic/round-add-photo-alternate';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Input, Divider, IconButton, InputAdornment, Stack } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../../redux/store';\r\nimport {\r\n  addRecipients,\r\n  onSendMessage,\r\n  getConversation,\r\n  getParticipants,\r\n  markConversationAsRead,\r\n  resetActiveConversation\r\n} from '../../../redux/slices/chat';\r\nimport axios from '../../../utils/axios';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n//\r\nimport EmojiPicker from '../../EmojiPicker';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')(({ theme }) => ({\r\n  minHeight: 56,\r\n  display: 'flex',\r\n  position: 'relative',\r\n  alignItems: 'center',\r\n  paddingLeft: theme.spacing(2)\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatMessageInput.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  conversationId: PropTypes.string,\r\n  onSend: PropTypes.func\r\n};\r\n\r\nexport default function ChatMessageInput({ disabled, conversationId, onSend, conversationKey, ...other }) {\r\n  const dispatch = useDispatch();\r\n  const fileInputRef = useRef(null);\r\n  const [message, setMessage] = useState('');\r\n  const { user } = useAuth();\r\n\r\n  const handleAttach = () => {\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const handleChangeMessage = (event) => {\r\n    setMessage(event.target.value);\r\n  };\r\n\r\n  const handleKeyUp = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleSend();\r\n    }\r\n  };\r\n\r\n  const handleSend = async () => {\r\n    if (!message) {\r\n      return '';\r\n    }\r\n    if (onSend) {\r\n      const accessToken = window.localStorage.getItem('accessToken');\r\n      const authHeader = {\r\n        headers: {\r\n          Authorization: `Bearer ${accessToken}`\r\n        }\r\n      };\r\n\r\n      onSend({\r\n        conversationId,\r\n        messageId: uuidv4(),\r\n        message,\r\n        contentType: 'text',\r\n        attachments: [],\r\n        createdAt: new Date(),\r\n        senderId: user\r\n      });\r\n\r\n      const resp = await axios.post(\r\n        '/chat/messages/new',\r\n        {\r\n          conversationId,\r\n          attachments: [],\r\n          message,\r\n          conversationKey\r\n        },\r\n        authHeader\r\n      );\r\n      dispatch(getConversation(resp.data.conversationKey));\r\n    }\r\n    return setMessage('');\r\n  };\r\n\r\n  return (\r\n    <RootStyle {...other}>\r\n      <Input\r\n        disabled={disabled}\r\n        fullWidth\r\n        value={message}\r\n        disableUnderline\r\n        onKeyUp={handleKeyUp}\r\n        onChange={handleChangeMessage}\r\n        placeholder=\"Type a message\"\r\n        startAdornment={\r\n          <InputAdornment position=\"start\">\r\n            <EmojiPicker disabled={disabled} value={message} setValue={setMessage} />\r\n          </InputAdornment>\r\n        }\r\n        sx={{ height: '100%' }}\r\n      />\r\n\r\n      <Divider orientation=\"vertical\" flexItem />\r\n\r\n      <IconButton color=\"primary\" disabled={!message} onClick={handleSend} sx={{ mx: 1 }}>\r\n        <Icon icon={roundSend} width={24} height={24} />\r\n      </IconButton>\r\n\r\n      <input type=\"file\" ref={fileInputRef} style={{ display: 'none' }} />\r\n    </RootStyle>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}