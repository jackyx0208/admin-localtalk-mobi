{"ast":null,"code":"import _objectSpread from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"conversations\",\"isOpenSidebar\",\"activeConversationId\",\"query\",\"onlyUnreadShow\"];import{find,map}from'lodash';// import { useEffect } from 'react';\nimport{useNavigate,useParams}from'react-router-dom';// import socketio from 'socket.io-client';\n// material\nimport{List}from'@material-ui/core';// routes\nimport{PATH_DASHBOARD}from'../../../routes/paths';//\nimport ChatConversationItem from'./ChatConversationItem';// redux\nimport{useSelector}from'../../../redux/store';// hooks\nimport useAuth from'../../../hooks/useAuth';// import { serverConfig } from '../../../config';\n// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";export default function ChatConversationList(_ref){var conversations=_ref.conversations,isOpenSidebar=_ref.isOpenSidebar,activeConversationId=_ref.activeConversationId,query=_ref.query,onlyUnreadShow=_ref.onlyUnreadShow,other=_objectWithoutProperties(_ref,_excluded);var navigate=useNavigate();var _useAuth=useAuth(),user=_useAuth.user;var _useSelector=useSelector(function(state){return state.user;}),userList=_useSelector.userList;var _useParams=useParams(),opponentId=_useParams.opponentId;var getConversationByUserId=function getConversationByUserId(userId){var conversation=find(conversations.byId,function(value){var userIds=map(value.users,function(user){return user._id;});// console.log(userIds);\nreturn userIds.indexOf(userId)>-1;});// console.log(userId, conversation);\nreturn conversation;};var isUnread=function isUnread(userId){var conversation=getConversationByUserId(userId);var unreadCount=conversation&&(conversation.lastMessage.users_see_message.indexOf(user._id)>-1?0:conversation.lastMessage.unread_count)||0;return unreadCount>0;};var localUsers=userList.filter(function(value){var result=value._id!==user._id&&value.name.toLowerCase().indexOf(query.toLowerCase())>-1;if(onlyUnreadShow&&result){return isUnread(value._id);}return result;});var handleSelectConversation=function handleSelectConversation(conversationUserId){navigate(\"\".concat(PATH_DASHBOARD.chat.private,\"/\").concat(conversationUserId));};return/*#__PURE__*/_jsx(List,_objectSpread(_objectSpread({disablePadding:true},other),{},{children:localUsers.map(function(value){return/*#__PURE__*/_jsx(ChatConversationItem,{opponent:value,isOpenSidebar:isOpenSidebar,conversation:getConversationByUserId(value._id),isSelected:opponentId===value._id,onSelectConversation:function onSelectConversation(){return handleSelectConversation(value._id);}// sx={{ ...(onlyUnreadShow && isUnread(value._id) && { display: 'none' }) }}\n},value._id);})}));}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/_dashboard/privatechat/ChatConversationList.js"],"names":["find","map","useNavigate","useParams","List","PATH_DASHBOARD","ChatConversationItem","useSelector","useAuth","ChatConversationList","conversations","isOpenSidebar","activeConversationId","query","onlyUnreadShow","other","navigate","user","state","userList","opponentId","getConversationByUserId","userId","conversation","byId","value","userIds","users","_id","indexOf","isUnread","unreadCount","lastMessage","users_see_message","unread_count","localUsers","filter","result","name","toLowerCase","handleSelectConversation","conversationUserId","chat","private"],"mappings":"icAAA,OAASA,IAAT,CAAeC,GAAf,KAA0B,QAA1B,CAEA;AACA,OAASC,WAAT,CAAsBC,SAAtB,KAAuC,kBAAvC,CACA;AACA;AACA,OAASC,IAAT,KAAqB,mBAArB,CACA;AACA,OAASC,cAAT,KAA+B,uBAA/B,CACA;AACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CACA;AACA,OAASC,WAAT,KAA4B,sBAA5B,CACA;AACA,MAAOC,CAAAA,OAAP,KAAoB,wBAApB,CAEA;AAEA;2CAUA,cAAe,SAASC,CAAAA,oBAAT,MAOZ,IANDC,CAAAA,aAMC,MANDA,aAMC,CALDC,aAKC,MALDA,aAKC,CAJDC,oBAIC,MAJDA,oBAIC,CAHDC,KAGC,MAHDA,KAGC,CAFDC,cAEC,MAFDA,cAEC,CADEC,KACF,0CACD,GAAMC,CAAAA,QAAQ,CAAGd,WAAW,EAA5B,CACA,aAAiBM,OAAO,EAAxB,CAAQS,IAAR,UAAQA,IAAR,CACA,iBAAqBV,WAAW,CAAC,SAACW,KAAD,QAAWA,CAAAA,KAAK,CAACD,IAAjB,EAAD,CAAhC,CAAQE,QAAR,cAAQA,QAAR,CACA,eAAuBhB,SAAS,EAAhC,CAAQiB,UAAR,YAAQA,UAAR,CAEA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,MAAD,CAAY,CAC1C,GAAMC,CAAAA,YAAY,CAAGvB,IAAI,CAACU,aAAa,CAACc,IAAf,CAAqB,SAACC,KAAD,CAAW,CACvD,GAAMC,CAAAA,OAAO,CAAGzB,GAAG,CAACwB,KAAK,CAACE,KAAP,CAAc,SAACV,IAAD,QAAUA,CAAAA,IAAI,CAACW,GAAf,EAAd,CAAnB,CACA;AACA,MAAOF,CAAAA,OAAO,CAACG,OAAR,CAAgBP,MAAhB,EAA0B,CAAC,CAAlC,CACD,CAJwB,CAAzB,CAKA;AACA,MAAOC,CAAAA,YAAP,CACD,CARD,CAUA,GAAMO,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACR,MAAD,CAAY,CAC3B,GAAMC,CAAAA,YAAY,CAAGF,uBAAuB,CAACC,MAAD,CAA5C,CACA,GAAMS,CAAAA,WAAW,CACdR,YAAY,GACVA,YAAY,CAACS,WAAb,CAAyBC,iBAAzB,CAA2CJ,OAA3C,CAAmDZ,IAAI,CAACW,GAAxD,EAA+D,CAAC,CAAhE,CACG,CADH,CAEGL,YAAY,CAACS,WAAb,CAAyBE,YAHlB,CAAb,EAIA,CALF,CAMA,MAAOH,CAAAA,WAAW,CAAG,CAArB,CACD,CATD,CAWA,GAAMI,CAAAA,UAAU,CAAGhB,QAAQ,CAACiB,MAAT,CAAgB,SAACX,KAAD,CAAW,CAC5C,GAAMY,CAAAA,MAAM,CAAGZ,KAAK,CAACG,GAAN,GAAcX,IAAI,CAACW,GAAnB,EAA0BH,KAAK,CAACa,IAAN,CAAWC,WAAX,GAAyBV,OAAzB,CAAiChB,KAAK,CAAC0B,WAAN,EAAjC,EAAwD,CAAC,CAAlG,CACA,GAAIzB,cAAc,EAAIuB,MAAtB,CAA8B,CAC5B,MAAOP,CAAAA,QAAQ,CAACL,KAAK,CAACG,GAAP,CAAf,CACD,CACD,MAAOS,CAAAA,MAAP,CACD,CANkB,CAAnB,CAQA,GAAMG,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,kBAAD,CAAwB,CACvDzB,QAAQ,WAAIX,cAAc,CAACqC,IAAf,CAAoBC,OAAxB,aAAmCF,kBAAnC,EAAR,CACD,CAFD,CAIA,mBACE,KAAC,IAAD,8BAAM,cAAc,KAApB,EAAyB1B,KAAzB,eACGoB,UAAU,CAAClC,GAAX,CAAe,SAACwB,KAAD,qBACd,KAAC,oBAAD,EAEE,QAAQ,CAAEA,KAFZ,CAGE,aAAa,CAAEd,aAHjB,CAIE,YAAY,CAAEU,uBAAuB,CAACI,KAAK,CAACG,GAAP,CAJvC,CAKE,UAAU,CAAER,UAAU,GAAKK,KAAK,CAACG,GALnC,CAME,oBAAoB,CAAE,sCAAMY,CAAAA,wBAAwB,CAACf,KAAK,CAACG,GAAP,CAA9B,EACtB;AAPF,EACOH,KAAK,CAACG,GADb,CADc,EAAf,CADH,GADF,CAeD","sourcesContent":["import { find, map } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n// import { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n// import socketio from 'socket.io-client';\r\n// material\r\nimport { List } from '@material-ui/core';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport ChatConversationItem from './ChatConversationItem';\r\n// redux\r\nimport { useSelector } from '../../../redux/store';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\n// import { serverConfig } from '../../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatConversationList.propTypes = {\r\n  conversations: PropTypes.object,\r\n  isOpenSidebar: PropTypes.bool,\r\n  activeConversationId: PropTypes.string,\r\n  query: PropTypes.string,\r\n  onlyUnreadShow: PropTypes.bool\r\n};\r\n\r\nexport default function ChatConversationList({\r\n  conversations,\r\n  isOpenSidebar,\r\n  activeConversationId,\r\n  query,\r\n  onlyUnreadShow,\r\n  ...other\r\n}) {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { userList } = useSelector((state) => state.user);\r\n  const { opponentId } = useParams();\r\n\r\n  const getConversationByUserId = (userId) => {\r\n    const conversation = find(conversations.byId, (value) => {\r\n      const userIds = map(value.users, (user) => user._id);\r\n      // console.log(userIds);\r\n      return userIds.indexOf(userId) > -1;\r\n    });\r\n    // console.log(userId, conversation);\r\n    return conversation;\r\n  };\r\n\r\n  const isUnread = (userId) => {\r\n    const conversation = getConversationByUserId(userId);\r\n    const unreadCount =\r\n      (conversation &&\r\n        (conversation.lastMessage.users_see_message.indexOf(user._id) > -1\r\n          ? 0\r\n          : conversation.lastMessage.unread_count)) ||\r\n      0;\r\n    return unreadCount > 0;\r\n  };\r\n\r\n  const localUsers = userList.filter((value) => {\r\n    const result = value._id !== user._id && value.name.toLowerCase().indexOf(query.toLowerCase()) > -1;\r\n    if (onlyUnreadShow && result) {\r\n      return isUnread(value._id);\r\n    }\r\n    return result;\r\n  });\r\n\r\n  const handleSelectConversation = (conversationUserId) => {\r\n    navigate(`${PATH_DASHBOARD.chat.private}/${conversationUserId}`);\r\n  };\r\n\r\n  return (\r\n    <List disablePadding {...other}>\r\n      {localUsers.map((value) => (\r\n        <ChatConversationItem\r\n          key={value._id}\r\n          opponent={value}\r\n          isOpenSidebar={isOpenSidebar}\r\n          conversation={getConversationByUserId(value._id)}\r\n          isSelected={opponentId === value._id}\r\n          onSelectConversation={() => handleSelectConversation(value._id)}\r\n          // sx={{ ...(onlyUnreadShow && isUnread(value._id) && { display: 'none' }) }}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}