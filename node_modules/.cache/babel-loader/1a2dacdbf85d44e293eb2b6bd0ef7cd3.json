{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { omit } from 'lodash'; // utils\n\nimport axios from '../../utils/axios'; // ----------------------------------------------------------------------\n\nfunction objFromArray(array, key = 'id') {\n  return array.reduce((accumulator, current) => {\n    accumulator[current[key]] = current;\n    return accumulator;\n  }, {});\n}\n\nconst initialState = {\n  isLoading: false,\n  error: false,\n  board: {\n    cards: {},\n    columns: {},\n    columnOrder: []\n  }\n};\nconst slice = createSlice({\n  name: 'kanban',\n  initialState,\n  reducers: {\n    // START LOADING\n    startLoading(state) {\n      state.isLoading = true;\n    },\n\n    // HAS ERROR\n    hasError(state, action) {\n      state.isLoading = false;\n      state.error = action.payload;\n    },\n\n    // GET BOARD\n    getBoardSuccess(state, action) {\n      state.isLoading = false;\n      const board = action.payload;\n      const cards = objFromArray(board.cards);\n      const columns = objFromArray(board.columns);\n      const {\n        columnOrder\n      } = board;\n      state.board = {\n        cards,\n        columns,\n        columnOrder\n      };\n    },\n\n    // CREATE NEW COLUMN\n    createColumnSuccess(state, action) {\n      const newColumn = action.payload;\n      state.isLoading = false;\n      state.board.columns = { ...state.board.columns,\n        [newColumn.id]: newColumn\n      };\n      state.board.columnOrder.push(newColumn.id);\n    },\n\n    persistCard(state, action) {\n      const {\n        columns\n      } = action.payload;\n      state.board.columns = columns;\n    },\n\n    persistColumn(state, action) {\n      state.board.columnOrder = action.payload;\n    },\n\n    addTask(state, action) {\n      const {\n        card,\n        columnId\n      } = action.payload;\n      state.board.cards[card.id] = card;\n      state.board.columns[columnId].cardIds.push(card.id);\n    },\n\n    deleteTask(state, action) {\n      const {\n        cardId,\n        columnId\n      } = action.payload;\n      state.board.columns[columnId].cardIds = state.board.columns[columnId].cardIds.filter(id => id !== cardId);\n      state.board.cards = omit(state.board.cards, [cardId]);\n    },\n\n    // UPDATE COLUMN\n    updateColumnSuccess(state, action) {\n      const column = action.payload;\n      state.isLoading = false;\n      state.board.columns[column.id] = column;\n    },\n\n    // DELETE COLUMN\n    deleteColumnSuccess(state, action) {\n      const {\n        columnId\n      } = action.payload;\n      const deletedColumn = state.board.columns[columnId];\n      state.isLoading = false;\n      state.board.columns = omit(state.board.columns, [columnId]);\n      state.board.cards = omit(state.board.cards, [...deletedColumn.cardIds]);\n      state.board.columnOrder = state.board.columnOrder.filter(c => c !== columnId);\n    }\n\n  }\n}); // Reducer\n\nexport default slice.reducer;\nexport const {\n  actions\n} = slice; // ----------------------------------------------------------------------\n\nexport function getBoard() {\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.get('/api/kanban/board');\n      dispatch(slice.actions.getBoardSuccess(response.data.board));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function createColumn(newColumn) {\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.post('/api/kanban/columns/new', newColumn);\n      dispatch(slice.actions.createColumnSuccess(response.data.column));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function updateColumn(columnId, updateColumn) {\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      const response = await axios.post('/api/kanban/columns/update', {\n        columnId,\n        updateColumn\n      });\n      dispatch(slice.actions.updateColumnSuccess(response.data.column));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function deleteColumn(columnId) {\n  return async dispatch => {\n    dispatch(slice.actions.startLoading());\n\n    try {\n      await axios.post('/api/kanban/columns/delete', {\n        columnId\n      });\n      dispatch(slice.actions.deleteColumnSuccess({\n        columnId\n      }));\n    } catch (error) {\n      dispatch(slice.actions.hasError(error));\n    }\n  };\n} // ----------------------------------------------------------------------\n\nexport function persistColumn(newColumnOrder) {\n  return dispatch => {\n    dispatch(slice.actions.persistColumn(newColumnOrder));\n  };\n} // ----------------------------------------------------------------------\n\nexport function persistCard(columns) {\n  return dispatch => {\n    dispatch(slice.actions.persistCard(columns));\n  };\n} // ----------------------------------------------------------------------\n\nexport function addTask(task) {\n  return dispatch => {\n    dispatch(slice.actions.addTask(task));\n  };\n} // ----------------------------------------------------------------------\n\nexport function deleteTask(taskId) {\n  return dispatch => {\n    dispatch(slice.actions.deleteTask(taskId));\n  };\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/redux/slices/kanban.js"],"names":["createSlice","omit","axios","objFromArray","array","key","reduce","accumulator","current","initialState","isLoading","error","board","cards","columns","columnOrder","slice","name","reducers","startLoading","state","hasError","action","payload","getBoardSuccess","createColumnSuccess","newColumn","id","push","persistCard","persistColumn","addTask","card","columnId","cardIds","deleteTask","cardId","filter","updateColumnSuccess","column","deleteColumnSuccess","deletedColumn","c","reducer","actions","getBoard","dispatch","response","get","data","createColumn","post","updateColumn","deleteColumn","newColumnOrder","task","taskId"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { omit } from 'lodash';\r\n// utils\r\nimport axios from '../../utils/axios';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nfunction objFromArray(array, key = 'id') {\r\n  return array.reduce((accumulator, current) => {\r\n    accumulator[current[key]] = current;\r\n    return accumulator;\r\n  }, {});\r\n}\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  error: false,\r\n  board: {\r\n    cards: {},\r\n    columns: {},\r\n    columnOrder: []\r\n  }\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'kanban',\r\n  initialState,\r\n  reducers: {\r\n    // START LOADING\r\n    startLoading(state) {\r\n      state.isLoading = true;\r\n    },\r\n\r\n    // HAS ERROR\r\n    hasError(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n\r\n    // GET BOARD\r\n    getBoardSuccess(state, action) {\r\n      state.isLoading = false;\r\n      const board = action.payload;\r\n      const cards = objFromArray(board.cards);\r\n      const columns = objFromArray(board.columns);\r\n      const { columnOrder } = board;\r\n      state.board = {\r\n        cards,\r\n        columns,\r\n        columnOrder\r\n      };\r\n    },\r\n\r\n    // CREATE NEW COLUMN\r\n    createColumnSuccess(state, action) {\r\n      const newColumn = action.payload;\r\n      state.isLoading = false;\r\n      state.board.columns = {\r\n        ...state.board.columns,\r\n        [newColumn.id]: newColumn\r\n      };\r\n      state.board.columnOrder.push(newColumn.id);\r\n    },\r\n\r\n    persistCard(state, action) {\r\n      const { columns } = action.payload;\r\n      state.board.columns = columns;\r\n    },\r\n\r\n    persistColumn(state, action) {\r\n      state.board.columnOrder = action.payload;\r\n    },\r\n\r\n    addTask(state, action) {\r\n      const { card, columnId } = action.payload;\r\n\r\n      state.board.cards[card.id] = card;\r\n      state.board.columns[columnId].cardIds.push(card.id);\r\n    },\r\n\r\n    deleteTask(state, action) {\r\n      const { cardId, columnId } = action.payload;\r\n\r\n      state.board.columns[columnId].cardIds = state.board.columns[columnId].cardIds.filter((id) => id !== cardId);\r\n      state.board.cards = omit(state.board.cards, [cardId]);\r\n    },\r\n\r\n    // UPDATE COLUMN\r\n    updateColumnSuccess(state, action) {\r\n      const column = action.payload;\r\n\r\n      state.isLoading = false;\r\n      state.board.columns[column.id] = column;\r\n    },\r\n\r\n    // DELETE COLUMN\r\n    deleteColumnSuccess(state, action) {\r\n      const { columnId } = action.payload;\r\n      const deletedColumn = state.board.columns[columnId];\r\n\r\n      state.isLoading = false;\r\n      state.board.columns = omit(state.board.columns, [columnId]);\r\n      state.board.cards = omit(state.board.cards, [...deletedColumn.cardIds]);\r\n      state.board.columnOrder = state.board.columnOrder.filter((c) => c !== columnId);\r\n    }\r\n  }\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n\r\nexport const { actions } = slice;\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function getBoard() {\r\n  return async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const response = await axios.get('/api/kanban/board');\r\n      dispatch(slice.actions.getBoardSuccess(response.data.board));\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error));\r\n    }\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function createColumn(newColumn) {\r\n  return async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const response = await axios.post('/api/kanban/columns/new', newColumn);\r\n      dispatch(slice.actions.createColumnSuccess(response.data.column));\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error));\r\n    }\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function updateColumn(columnId, updateColumn) {\r\n  return async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const response = await axios.post('/api/kanban/columns/update', {\r\n        columnId,\r\n        updateColumn\r\n      });\r\n      dispatch(slice.actions.updateColumnSuccess(response.data.column));\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error));\r\n    }\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function deleteColumn(columnId) {\r\n  return async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      await axios.post('/api/kanban/columns/delete', { columnId });\r\n      dispatch(slice.actions.deleteColumnSuccess({ columnId }));\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error));\r\n    }\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function persistColumn(newColumnOrder) {\r\n  return (dispatch) => {\r\n    dispatch(slice.actions.persistColumn(newColumnOrder));\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function persistCard(columns) {\r\n  return (dispatch) => {\r\n    dispatch(slice.actions.persistCard(columns));\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function addTask(task) {\r\n  return (dispatch) => {\r\n    dispatch(slice.actions.addTask(task));\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function deleteTask(taskId) {\r\n  return (dispatch) => {\r\n    dispatch(slice.actions.deleteTask(taskId));\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}