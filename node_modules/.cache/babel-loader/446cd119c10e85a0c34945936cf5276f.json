{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi\\\\mobilechat-adminpanel\\\\src\\\\components\\\\_dashboard\\\\chat\\\\ChatWindow.js\";\nimport { useEffect } from 'react';\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'; // material\n\nimport { Box, Divider } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport { addRecipients, onSendMessage, getConversation, getParticipants, markConversationAsRead, resetActiveConversation } from '../../../redux/slices/chat'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n\nimport ChatRoom from './ChatRoom';\nimport ChatMessageList from './ChatMessageList';\nimport ChatHeaderDetail from './ChatHeaderDetail';\nimport ChatMessageInput from './ChatMessageInput';\nimport ChatHeaderCompose from './ChatHeaderCompose'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst conversationSelector = state => {\n  const {\n    conversations,\n    activeConversationId\n  } = state.chat;\n  const conversation = conversations.byId[activeConversationId];\n\n  if (conversation) {\n    return conversation;\n  }\n\n  return {\n    id: null,\n    messages: [],\n    participants: [],\n    unreadMessages: 0\n  };\n};\n\nexport default function ChatWindow() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    conversationKey\n  } = useParams();\n  const {\n    contacts,\n    recipients,\n    participants,\n    activeConversationId\n  } = useSelector(state => state.chat);\n  const conversation = useSelector(state => conversationSelector(state));\n  const mode = conversationKey ? 'DETAIL' : 'COMPOSE';\n  const displayParticipants = participants.filter(item => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\n  useEffect(() => {\n    const getDetails = async () => {\n      dispatch(getParticipants(conversationKey));\n\n      try {\n        dispatch(getConversation(conversationKey));\n      } catch (error) {\n        console.error(error);\n        navigate(PATH_DASHBOARD.chat.new);\n      }\n    };\n\n    if (conversationKey) {\n      getDetails();\n    } else if (activeConversationId) {\n      dispatch(resetActiveConversation());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [conversationKey]);\n  useEffect(() => {\n    if (activeConversationId) {\n      dispatch(markConversationAsRead(activeConversationId));\n    }\n  }, [dispatch, activeConversationId]);\n\n  const handleAddRecipient = recipient => {\n    dispatch(addRecipients(recipient));\n  };\n\n  const handleSendMessage = async value => {\n    try {\n      dispatch(onSendMessage(value));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [mode === 'DETAIL' ? /*#__PURE__*/_jsxDEV(ChatHeaderDetail, {\n      participants: displayParticipants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ChatHeaderCompose, {\n      recipients: recipients,\n      contacts: Object.values(contacts.byId),\n      onAddRecipient: handleAddRecipient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1,\n        display: 'flex',\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexGrow: 1,\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ChatMessageList, {\n          conversation: conversation\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatMessageInput, {\n          conversationId: activeConversationId,\n          conversationKey: conversationKey,\n          onSend: handleSendMessage,\n          disabled: pathname === PATH_DASHBOARD.chat.new\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), mode === 'DETAIL' && /*#__PURE__*/_jsxDEV(ChatRoom, {\n        conversation: conversation,\n        participants: displayParticipants\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/_dashboard/chat/ChatWindow.js"],"names":["useEffect","useNavigate","useParams","useLocation","Box","Divider","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","PATH_DASHBOARD","ChatRoom","ChatMessageList","ChatHeaderDetail","ChatMessageInput","ChatHeaderCompose","conversationSelector","state","conversations","activeConversationId","chat","conversation","byId","id","messages","participants","unreadMessages","ChatWindow","dispatch","navigate","pathname","conversationKey","contacts","recipients","mode","displayParticipants","filter","item","_id","getDetails","error","console","new","handleAddRecipient","recipient","handleSendMessage","value","flexGrow","display","flexDirection","Object","values","overflow"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Box, Divider } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../../redux/store';\r\nimport {\r\n  addRecipients,\r\n  onSendMessage,\r\n  getConversation,\r\n  getParticipants,\r\n  markConversationAsRead,\r\n  resetActiveConversation\r\n} from '../../../redux/slices/chat';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport ChatRoom from './ChatRoom';\r\nimport ChatMessageList from './ChatMessageList';\r\nimport ChatHeaderDetail from './ChatHeaderDetail';\r\nimport ChatMessageInput from './ChatMessageInput';\r\nimport ChatHeaderCompose from './ChatHeaderCompose';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst conversationSelector = (state) => {\r\n  const { conversations, activeConversationId } = state.chat;\r\n  const conversation = conversations.byId[activeConversationId];\r\n  if (conversation) {\r\n    return conversation;\r\n  }\r\n  return {\r\n    id: null,\r\n    messages: [],\r\n    participants: [],\r\n    unreadMessages: 0\r\n  };\r\n};\r\n\r\nexport default function ChatWindow() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { pathname } = useLocation();\r\n  const { conversationKey } = useParams();\r\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.chat);\r\n  const conversation = useSelector((state) => conversationSelector(state));\r\n  const mode = conversationKey ? 'DETAIL' : 'COMPOSE';\r\n\r\n  const displayParticipants = participants.filter((item) => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\r\n\r\n  useEffect(() => {\r\n    const getDetails = async () => {\r\n      dispatch(getParticipants(conversationKey));\r\n      try {\r\n        dispatch(getConversation(conversationKey));\r\n      } catch (error) {\r\n        console.error(error);\r\n        navigate(PATH_DASHBOARD.chat.new);\r\n      }\r\n    };\r\n    if (conversationKey) {\r\n      getDetails();\r\n    } else if (activeConversationId) {\r\n      dispatch(resetActiveConversation());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [conversationKey]);\r\n\r\n  useEffect(() => {\r\n    if (activeConversationId) {\r\n      dispatch(markConversationAsRead(activeConversationId));\r\n    }\r\n  }, [dispatch, activeConversationId]);\r\n\r\n  const handleAddRecipient = (recipient) => {\r\n    dispatch(addRecipients(recipient));\r\n  };\r\n\r\n  const handleSendMessage = async (value) => {\r\n    try {\r\n      dispatch(onSendMessage(value));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\r\n      {mode === 'DETAIL' ? (\r\n        <ChatHeaderDetail participants={displayParticipants} />\r\n      ) : (\r\n        <ChatHeaderCompose\r\n          recipients={recipients}\r\n          contacts={Object.values(contacts.byId)}\r\n          onAddRecipient={handleAddRecipient}\r\n        />\r\n      )}\r\n\r\n      <Divider />\r\n\r\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\r\n        <Box sx={{ display: 'flex', flexGrow: 1, flexDirection: 'column' }}>\r\n          <ChatMessageList conversation={conversation} />\r\n\r\n          <Divider />\r\n\r\n          <ChatMessageInput\r\n            conversationId={activeConversationId}\r\n            conversationKey={conversationKey}\r\n            onSend={handleSendMessage}\r\n            disabled={pathname === PATH_DASHBOARD.chat.new}\r\n          />\r\n        </Box>\r\n\r\n        {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}