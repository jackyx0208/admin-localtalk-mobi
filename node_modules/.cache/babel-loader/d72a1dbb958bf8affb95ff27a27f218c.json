{"ast":null,"code":"import _objectSpread from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"conversations\",\"isOpenSidebar\",\"activeConversationId\"];import{useNavigate}from'react-router-dom';// material\nimport{List}from'@material-ui/core';// routes\nimport{PATH_DASHBOARD}from'../../../routes/paths';//\nimport ChatConversationItem from'./ChatConversationItem';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";export default function ChatConversationList(_ref){var conversations=_ref.conversations,isOpenSidebar=_ref.isOpenSidebar,activeConversationId=_ref.activeConversationId,other=_objectWithoutProperties(_ref,_excluded);var navigate=useNavigate();var handleSelectConversation=function handleSelectConversation(conversationId){var conversationKey='';var conversation=conversations.byId[conversationId];if(conversation.type==='GROUP'){conversationKey=conversation._id;}else{var otherParticipant=conversation.participants.find(function(participant){return participant._id!=='8864c717-587d-472a-929a-8e5f298024da-0';});conversationKey=otherParticipant.username;}navigate(\"\".concat(PATH_DASHBOARD.chat.root,\"/\").concat(conversationKey));};return/*#__PURE__*/_jsx(List,_objectSpread(_objectSpread({disablePadding:true},other),{},{children:conversations.allIds.map(function(conversationId){return/*#__PURE__*/_jsx(ChatConversationItem,{isOpenSidebar:isOpenSidebar,conversation:conversations.byId[conversationId],isSelected:activeConversationId===conversationId,onSelectConversation:function onSelectConversation(){return handleSelectConversation(conversationId);}},conversationId);})}));}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/_dashboard/chat/ChatConversationList.js"],"names":["useNavigate","List","PATH_DASHBOARD","ChatConversationItem","ChatConversationList","conversations","isOpenSidebar","activeConversationId","other","navigate","handleSelectConversation","conversationId","conversationKey","conversation","byId","type","_id","otherParticipant","participants","find","participant","username","chat","root","allIds","map"],"mappings":"waACA,OAASA,WAAT,KAA4B,kBAA5B,CACA;AACA,OAASC,IAAT,KAAqB,mBAArB,CACA;AACA,OAASC,cAAT,KAA+B,uBAA/B,CACA;AACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CAEA;2CAQA,cAAe,SAASC,CAAAA,oBAAT,MAAgG,IAAhEC,CAAAA,aAAgE,MAAhEA,aAAgE,CAAjDC,aAAiD,MAAjDA,aAAiD,CAAlCC,oBAAkC,MAAlCA,oBAAkC,CAATC,KAAS,0CAC7G,GAAMC,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CAEA,GAAMU,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,cAAD,CAAoB,CACnD,GAAIC,CAAAA,eAAe,CAAG,EAAtB,CACA,GAAMC,CAAAA,YAAY,CAAGR,aAAa,CAACS,IAAd,CAAmBH,cAAnB,CAArB,CACA,GAAIE,YAAY,CAACE,IAAb,GAAsB,OAA1B,CAAmC,CACjCH,eAAe,CAAGC,YAAY,CAACG,GAA/B,CACD,CAFD,IAEO,CACL,GAAMC,CAAAA,gBAAgB,CAAGJ,YAAY,CAACK,YAAb,CAA0BC,IAA1B,CACvB,SAACC,WAAD,QAAiBA,CAAAA,WAAW,CAACJ,GAAZ,GAAoB,wCAArC,EADuB,CAAzB,CAGAJ,eAAe,CAAGK,gBAAgB,CAACI,QAAnC,CACD,CACDZ,QAAQ,WAAIP,cAAc,CAACoB,IAAf,CAAoBC,IAAxB,aAAgCX,eAAhC,EAAR,CACD,CAZD,CAcA,mBACE,KAAC,IAAD,8BAAM,cAAc,KAApB,EAAyBJ,KAAzB,eACGH,aAAa,CAACmB,MAAd,CAAqBC,GAArB,CAAyB,SAACd,cAAD,qBACxB,KAAC,oBAAD,EAEE,aAAa,CAAEL,aAFjB,CAGE,YAAY,CAAED,aAAa,CAACS,IAAd,CAAmBH,cAAnB,CAHhB,CAIE,UAAU,CAAEJ,oBAAoB,GAAKI,cAJvC,CAKE,oBAAoB,CAAE,sCAAMD,CAAAA,wBAAwB,CAACC,cAAD,CAA9B,EALxB,EACOA,cADP,CADwB,EAAzB,CADH,GADF,CAaD","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useNavigate } from 'react-router-dom';\r\n// material\r\nimport { List } from '@material-ui/core';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport ChatConversationItem from './ChatConversationItem';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatConversationList.propTypes = {\r\n  conversations: PropTypes.object,\r\n  isOpenSidebar: PropTypes.bool,\r\n  activeConversationId: PropTypes.string\r\n};\r\n\r\nexport default function ChatConversationList({ conversations, isOpenSidebar, activeConversationId, ...other }) {\r\n  const navigate = useNavigate();\r\n\r\n  const handleSelectConversation = (conversationId) => {\r\n    let conversationKey = '';\r\n    const conversation = conversations.byId[conversationId];\r\n    if (conversation.type === 'GROUP') {\r\n      conversationKey = conversation._id;\r\n    } else {\r\n      const otherParticipant = conversation.participants.find(\r\n        (participant) => participant._id !== '8864c717-587d-472a-929a-8e5f298024da-0'\r\n      );\r\n      conversationKey = otherParticipant.username;\r\n    }\r\n    navigate(`${PATH_DASHBOARD.chat.root}/${conversationKey}`);\r\n  };\r\n\r\n  return (\r\n    <List disablePadding {...other}>\r\n      {conversations.allIds.map((conversationId) => (\r\n        <ChatConversationItem\r\n          key={conversationId}\r\n          isOpenSidebar={isOpenSidebar}\r\n          conversation={conversations.byId[conversationId]}\r\n          isSelected={activeConversationId === conversationId}\r\n          onSelectConversation={() => handleSelectConversation(conversationId)}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}