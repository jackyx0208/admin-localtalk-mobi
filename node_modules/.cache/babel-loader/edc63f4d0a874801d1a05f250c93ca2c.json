{"ast":null,"code":"import _regeneratorRuntime from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{map,filter}from'lodash';import{createSlice}from'@reduxjs/toolkit';// utils\nimport axios from'../../utils/axios';var initialState={isLoading:false,error:false,words:[],wordList:[]};var slice=createSlice({name:'blocklimitedword',initialState:initialState,reducers:{// START LOADING\nstartLoading:function startLoading(state){state.isLoading=true;},// HAS ERROR\nhasError:function hasError(state,action){state.isLoading=false;state.error=action.payload;},// GET USERS\ngetWordsSuccess:function getWordsSuccess(state,action){state.isLoading=false;state.wordList=action.payload;},// DELETE Word\ndeleteWord:function deleteWord(state,action){var deleteWord=filter(state.wordList,function(word){return word._id!==action.payload;});state.wordList=deleteWord;}}});// Reducer\nexport default slice.reducer;// Actions\nvar deleteWord=slice.actions.deleteWord;// ----------------------------------------------------------------------\nexport{deleteWord};export function getWordList(){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(slice.actions.startLoading());_context.prev=1;_context.next=4;return axios.get('/block-limited-words');case 4:response=_context.sent;dispatch(slice.actions.getWordsSuccess(response.data.limitblockwords));_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);dispatch(slice.actions.hasError(_context.t0));case 11:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function(_x){return _ref.apply(this,arguments);};}();}// ----------------------------------------------------------------------","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/redux/slices/blocklimitedword.js"],"names":["map","filter","createSlice","axios","initialState","isLoading","error","words","wordList","slice","name","reducers","startLoading","state","hasError","action","payload","getWordsSuccess","deleteWord","word","_id","reducer","actions","getWordList","dispatch","get","response","data","limitblockwords"],"mappings":"2UAAA,OAASA,GAAT,CAAcC,MAAd,KAA4B,QAA5B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA;AACA,MAAOC,CAAAA,KAAP,KAAkB,mBAAlB,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,SAAS,CAAE,KADQ,CAEnBC,KAAK,CAAE,KAFY,CAGnBC,KAAK,CAAE,EAHY,CAInBC,QAAQ,CAAE,EAJS,CAArB,CAOA,GAAMC,CAAAA,KAAK,CAAGP,WAAW,CAAC,CACxBQ,IAAI,CAAE,kBADkB,CAExBN,YAAY,CAAZA,YAFwB,CAGxBO,QAAQ,CAAE,CACR;AACAC,YAFQ,uBAEKC,KAFL,CAEY,CAClBA,KAAK,CAACR,SAAN,CAAkB,IAAlB,CACD,CAJO,CAKR;AACAS,QANQ,mBAMCD,KAND,CAMQE,MANR,CAMgB,CACtBF,KAAK,CAACR,SAAN,CAAkB,KAAlB,CACAQ,KAAK,CAACP,KAAN,CAAcS,MAAM,CAACC,OAArB,CACD,CATO,CAUR;AACAC,eAXQ,0BAWQJ,KAXR,CAWeE,MAXf,CAWuB,CAC7BF,KAAK,CAACR,SAAN,CAAkB,KAAlB,CACAQ,KAAK,CAACL,QAAN,CAAiBO,MAAM,CAACC,OAAxB,CACD,CAdO,CAeR;AACAE,UAhBQ,qBAgBGL,KAhBH,CAgBUE,MAhBV,CAgBkB,CACxB,GAAMG,CAAAA,UAAU,CAAGjB,MAAM,CAACY,KAAK,CAACL,QAAP,CAAiB,SAACW,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaL,MAAM,CAACC,OAA9B,EAAjB,CAAzB,CACAH,KAAK,CAACL,QAAN,CAAiBU,UAAjB,CACD,CAnBO,CAHc,CAAD,CAAzB,CA0BA;AACA,cAAeT,CAAAA,KAAK,CAACY,OAArB,CACA;AACO,GAAQH,CAAAA,UAAR,CAAuBT,KAAK,CAACa,OAA7B,CAAQJ,UAAR,CAEP;mBAEA,MAAO,SAASK,CAAAA,WAAT,EAAuB,CAC5B,+FAAO,iBAAOC,QAAP,+HACLA,QAAQ,CAACf,KAAK,CAACa,OAAN,CAAcV,YAAd,EAAD,CAAR,CADK,sCAGoBT,CAAAA,KAAK,CAACsB,GAAN,CAAU,sBAAV,CAHpB,QAGGC,QAHH,eAIHF,QAAQ,CAACf,KAAK,CAACa,OAAN,CAAcL,eAAd,CAA8BS,QAAQ,CAACC,IAAT,CAAcC,eAA5C,CAAD,CAAR,CAJG,+EAMHJ,QAAQ,CAACf,KAAK,CAACa,OAAN,CAAcR,QAAd,aAAD,CAAR,CANG,oEAAP,+DASD,CAED","sourcesContent":["import { map, filter } from 'lodash';\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n// utils\r\nimport axios from '../../utils/axios';\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  error: false,\r\n  words: [],\r\n  wordList: []\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'blocklimitedword',\r\n  initialState,\r\n  reducers: {\r\n    // START LOADING\r\n    startLoading(state) {\r\n      state.isLoading = true;\r\n    },\r\n    // HAS ERROR\r\n    hasError(state, action) {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n    // GET USERS\r\n    getWordsSuccess(state, action) {\r\n      state.isLoading = false;\r\n      state.wordList = action.payload;\r\n    },\r\n    // DELETE Word\r\n    deleteWord(state, action) {\r\n      const deleteWord = filter(state.wordList, (word) => word._id !== action.payload);\r\n      state.wordList = deleteWord;\r\n    }\r\n  }\r\n});\r\n\r\n// Reducer\r\nexport default slice.reducer;\r\n// Actions\r\nexport const { deleteWord } = slice.actions;\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport function getWordList() {\r\n  return async (dispatch) => {\r\n    dispatch(slice.actions.startLoading());\r\n    try {\r\n      const response = await axios.get('/block-limited-words');\r\n      dispatch(slice.actions.getWordsSuccess(response.data.limitblockwords));\r\n    } catch (error) {\r\n      dispatch(slice.actions.hasError(error));\r\n    }\r\n  };\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n"]},"metadata":{},"sourceType":"module"}