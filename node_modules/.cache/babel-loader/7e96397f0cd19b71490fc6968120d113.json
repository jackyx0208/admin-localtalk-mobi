{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi\\\\mobilechat-adminpanel\\\\src\\\\components\\\\_dashboard\\\\privatechat\\\\ChatConversationList.js\";\nimport { find, map } from 'lodash';\nimport PropTypes from 'prop-types'; // import { useEffect } from 'react';\n\nimport { useNavigate, useParams } from 'react-router-dom'; // import socketio from 'socket.io-client';\n// material\n\nimport { List } from '@material-ui/core'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; //\n\nimport ChatConversationItem from './ChatConversationItem'; // redux\n\nimport { useSelector } from '../../../redux/store'; // hooks\n\nimport useAuth from '../../../hooks/useAuth'; // import { serverConfig } from '../../../config';\n// ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChatConversationList.propTypes = {\n  conversations: PropTypes.object,\n  isOpenSidebar: PropTypes.bool,\n  activeConversationId: PropTypes.string,\n  query: PropTypes.string,\n  onlyUnreadShow: PropTypes.bool\n};\nexport default function ChatConversationList({\n  conversations,\n  isOpenSidebar,\n  activeConversationId,\n  query,\n  onlyUnreadShow,\n  ...other\n}) {\n  const navigate = useNavigate();\n  const {\n    user\n  } = useAuth();\n  const {\n    userList\n  } = useSelector(state => state.user);\n  const {\n    opponentId\n  } = useParams();\n\n  const getConversationByUserId = userId => {\n    const conversation = find(conversations.byId, value => {\n      const userIds = map(value.users, user => user._id); // console.log(userIds);\n\n      return userIds.indexOf(userId) > -1;\n    }); // console.log(userId, conversation);\n\n    return conversation;\n  };\n\n  const isUnread = userId => {\n    const conversation = getConversationByUserId(userId);\n    const unreadCount = conversation && (conversation.lastMessage.users_see_message.indexOf(user._id) > -1 ? 0 : conversation.lastMessage.unread_count) || 0;\n    return unreadCount > 0;\n  };\n\n  const localUsers = userList.filter(value => {\n    const result = value._id !== user._id && value.name.toLowerCase().indexOf(query.toLowerCase()) > -1;\n\n    if (onlyUnreadShow && result) {\n      return isUnread(value._id);\n    }\n\n    return result;\n  });\n\n  const handleSelectConversation = conversationUserId => {\n    navigate(`${PATH_DASHBOARD.chat.private}/${conversationUserId}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    disablePadding: true,\n    ...other,\n    children: localUsers.map(value => /*#__PURE__*/_jsxDEV(ChatConversationItem, {\n      opponent: value,\n      isOpenSidebar: isOpenSidebar,\n      conversation: getConversationByUserId(value._id),\n      isSelected: opponentId === value._id,\n      onSelectConversation: () => handleSelectConversation(value._id) // sx={{ ...(onlyUnreadShow && isUnread(value._id) && { display: 'none' }) }}\n\n    }, value._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/_dashboard/privatechat/ChatConversationList.js"],"names":["find","map","PropTypes","useNavigate","useParams","List","PATH_DASHBOARD","ChatConversationItem","useSelector","useAuth","ChatConversationList","propTypes","conversations","object","isOpenSidebar","bool","activeConversationId","string","query","onlyUnreadShow","other","navigate","user","userList","state","opponentId","getConversationByUserId","userId","conversation","byId","value","userIds","users","_id","indexOf","isUnread","unreadCount","lastMessage","users_see_message","unread_count","localUsers","filter","result","name","toLowerCase","handleSelectConversation","conversationUserId","chat","private"],"mappings":"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","sourcesContent":["import { find, map } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\n// import { useEffect } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n// import socketio from 'socket.io-client';\r\n// material\r\nimport { List } from '@material-ui/core';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport ChatConversationItem from './ChatConversationItem';\r\n// redux\r\nimport { useSelector } from '../../../redux/store';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\n// import { serverConfig } from '../../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nChatConversationList.propTypes = {\r\n  conversations: PropTypes.object,\r\n  isOpenSidebar: PropTypes.bool,\r\n  activeConversationId: PropTypes.string,\r\n  query: PropTypes.string,\r\n  onlyUnreadShow: PropTypes.bool\r\n};\r\n\r\nexport default function ChatConversationList({\r\n  conversations,\r\n  isOpenSidebar,\r\n  activeConversationId,\r\n  query,\r\n  onlyUnreadShow,\r\n  ...other\r\n}) {\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { userList } = useSelector((state) => state.user);\r\n  const { opponentId } = useParams();\r\n\r\n  const getConversationByUserId = (userId) => {\r\n    const conversation = find(conversations.byId, (value) => {\r\n      const userIds = map(value.users, (user) => user._id);\r\n      // console.log(userIds);\r\n      return userIds.indexOf(userId) > -1;\r\n    });\r\n    // console.log(userId, conversation);\r\n    return conversation;\r\n  };\r\n\r\n  const isUnread = (userId) => {\r\n    const conversation = getConversationByUserId(userId);\r\n    const unreadCount =\r\n      (conversation &&\r\n        (conversation.lastMessage.users_see_message.indexOf(user._id) > -1\r\n          ? 0\r\n          : conversation.lastMessage.unread_count)) ||\r\n      0;\r\n    return unreadCount > 0;\r\n  };\r\n\r\n  const localUsers = userList.filter((value) => {\r\n    const result = value._id !== user._id && value.name.toLowerCase().indexOf(query.toLowerCase()) > -1;\r\n    if (onlyUnreadShow && result) {\r\n      return isUnread(value._id);\r\n    }\r\n    return result;\r\n  });\r\n\r\n  const handleSelectConversation = (conversationUserId) => {\r\n    navigate(`${PATH_DASHBOARD.chat.private}/${conversationUserId}`);\r\n  };\r\n\r\n  return (\r\n    <List disablePadding {...other}>\r\n      {localUsers.map((value) => (\r\n        <ChatConversationItem\r\n          key={value._id}\r\n          opponent={value}\r\n          isOpenSidebar={isOpenSidebar}\r\n          conversation={getConversationByUserId(value._id)}\r\n          isSelected={opponentId === value._id}\r\n          onSelectConversation={() => handleSelectConversation(value._id)}\r\n          // sx={{ ...(onlyUnreadShow && isUnread(value._id) && { display: 'none' }) }}\r\n        />\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}