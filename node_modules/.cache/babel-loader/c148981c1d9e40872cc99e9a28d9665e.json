{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi\\\\mobilechat-adminpanel\\\\src\\\\components\\\\settings\\\\SettingFullscreen.js\";\nimport { useState } from 'react';\nimport { Icon } from '@iconify/react';\nimport roundFullscreen from '@iconify/icons-ic/round-fullscreen';\nimport roundFullscreenExit from '@iconify/icons-ic/round-fullscreen-exit'; // material\n\nimport { alpha } from '@material-ui/core/styles';\nimport { Button } from '@material-ui/core'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SettingFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n\n  const toggleFullScreen = () => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n      setFullscreen(true);\n    } else if (document.exitFullscreen) {\n      document.exitFullscreen();\n      setFullscreen(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    fullWidth: true,\n    size: \"large\",\n    variant: \"outlined\",\n    color: fullscreen ? 'primary' : 'inherit',\n    startIcon: /*#__PURE__*/_jsxDEV(Icon, {\n      icon: fullscreen ? roundFullscreenExit : roundFullscreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 18\n    }, this),\n    onClick: toggleFullScreen,\n    sx: {\n      fontSize: 14,\n      ...(fullscreen && {\n        bgcolor: theme => alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n      })\n    },\n    children: fullscreen ? 'Exit Fullscreen' : 'Fullscreen'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/settings/SettingFullscreen.js"],"names":["useState","Icon","roundFullscreen","roundFullscreenExit","alpha","Button","SettingFullscreen","fullscreen","setFullscreen","toggleFullScreen","document","fullscreenElement","documentElement","requestFullscreen","exitFullscreen","fontSize","bgcolor","theme","palette","primary","main","action","selectedOpacity"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,IAAT,QAAqB,gBAArB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,mBAAP,MAAgC,yCAAhC,C,CACA;;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,MAAT,QAAuB,mBAAvB,C,CAEA;;;AAEA,eAAe,SAASC,iBAAT,GAA6B;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;;AAEA,QAAMS,gBAAgB,GAAG,MAAM;AAC7B,QAAI,CAACC,QAAQ,CAACC,iBAAd,EAAiC;AAC/BD,MAAAA,QAAQ,CAACE,eAAT,CAAyBC,iBAAzB;AACAL,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD,KAHD,MAGO,IAAIE,QAAQ,CAACI,cAAb,EAA6B;AAClCJ,MAAAA,QAAQ,CAACI,cAAT;AACAN,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD;AACF,GARD;;AAUA,sBACE,QAAC,MAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,EAAC,OAFP;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,KAAK,EAAED,UAAU,GAAG,SAAH,GAAe,SAJlC;AAKE,IAAA,SAAS,eAAE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEA,UAAU,GAAGJ,mBAAH,GAAyBD;AAA/C;AAAA;AAAA;AAAA;AAAA,YALb;AAME,IAAA,OAAO,EAAEO,gBANX;AAOE,IAAA,EAAE,EAAE;AACFM,MAAAA,QAAQ,EAAE,EADR;AAEF,UAAIR,UAAU,IAAI;AAChBS,QAAAA,OAAO,EAAGC,KAAD,IAAWb,KAAK,CAACa,KAAK,CAACC,OAAN,CAAcC,OAAd,CAAsBC,IAAvB,EAA6BH,KAAK,CAACC,OAAN,CAAcG,MAAd,CAAqBC,eAAlD;AADT,OAAlB;AAFE,KAPN;AAAA,cAcGf,UAAU,GAAG,iBAAH,GAAuB;AAdpC;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD","sourcesContent":["import { useState } from 'react';\r\nimport { Icon } from '@iconify/react';\r\nimport roundFullscreen from '@iconify/icons-ic/round-fullscreen';\r\nimport roundFullscreenExit from '@iconify/icons-ic/round-fullscreen-exit';\r\n// material\r\nimport { alpha } from '@material-ui/core/styles';\r\nimport { Button } from '@material-ui/core';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function SettingFullscreen() {\r\n  const [fullscreen, setFullscreen] = useState(false);\r\n\r\n  const toggleFullScreen = () => {\r\n    if (!document.fullscreenElement) {\r\n      document.documentElement.requestFullscreen();\r\n      setFullscreen(true);\r\n    } else if (document.exitFullscreen) {\r\n      document.exitFullscreen();\r\n      setFullscreen(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      fullWidth\r\n      size=\"large\"\r\n      variant=\"outlined\"\r\n      color={fullscreen ? 'primary' : 'inherit'}\r\n      startIcon={<Icon icon={fullscreen ? roundFullscreenExit : roundFullscreen} />}\r\n      onClick={toggleFullScreen}\r\n      sx={{\r\n        fontSize: 14,\r\n        ...(fullscreen && {\r\n          bgcolor: (theme) => alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\r\n        })\r\n      }}\r\n    >\r\n      {fullscreen ? 'Exit Fullscreen' : 'Fullscreen'}\r\n    </Button>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}