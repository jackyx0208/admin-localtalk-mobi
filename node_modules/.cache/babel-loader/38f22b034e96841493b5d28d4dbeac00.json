{"ast":null,"code":"import{useEffect}from'react';// import { paramCase } from 'change-case';\n// import { useParams, useLocation } from 'react-router-dom';\n// material\nimport{Container}from'@material-ui/core';// redux\nimport{useDispatch,useSelector}from'../../redux/store';import{getSettingsList}from'../../redux/slices/settings';// import { getWordList } from '../../redux/slices/prohibitedword';\n// routes\nimport{PATH_DASHBOARD}from'../../routes/paths';// hooks\nimport useSettings from'../../hooks/useSettings';// components\nimport Page from'../../components/Page';import HeaderBreadcrumbs from'../../components/HeaderBreadcrumbs';import ParameterSettingsForm from'../../components/_dashboard/settings/ParameterSettingsForm';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function ParameterSettings(){var _useSettings=useSettings(),themeStretch=_useSettings.themeStretch;var dispatch=useDispatch();// const { pathname } = useLocation();\n// const { word } = useParams();\nvar _useSelector=useSelector(function(state){return state.setting;}),settingsList=_useSelector.settingsList;var parameterSettings=settingsList.find(function(settingRow){return settingRow.type==='parameter';});useEffect(function(){dispatch(getSettingsList());},[dispatch]);return/*#__PURE__*/_jsx(Page,{title:\"Settings: Parameter Settings | Locals\",children:/*#__PURE__*/_jsxs(Container,{maxWidth:themeStretch?false:'lg',children:[/*#__PURE__*/_jsx(HeaderBreadcrumbs,{heading:\"Parameter Settings\",links:[{name:'Dashboard',href:PATH_DASHBOARD.root},{name:'Settings',href:PATH_DASHBOARD.settings.parameters},{name:'Parameters'}]}),/*#__PURE__*/_jsx(ParameterSettingsForm,{settingsData:parameterSettings})]})});}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/pages/dashboard/ParameterSettings.js"],"names":["useEffect","Container","useDispatch","useSelector","getSettingsList","PATH_DASHBOARD","useSettings","Page","HeaderBreadcrumbs","ParameterSettingsForm","ParameterSettings","themeStretch","dispatch","state","setting","settingsList","parameterSettings","find","settingRow","type","name","href","root","settings","parameters"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA;AACA;AACA;AACA,OAASC,SAAT,KAA0B,mBAA1B,CACA;AACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,mBAAzC,CACA,OAASC,eAAT,KAAgC,6BAAhC,CACA;AACA;AACA,OAASC,cAAT,KAA+B,oBAA/B,CACA;AACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CACA;AACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,oCAA9B,CACA,MAAOC,CAAAA,qBAAP,KAAkC,4DAAlC,CAEA;wFAEA,cAAe,SAASC,CAAAA,iBAAT,EAA6B,CAC1C,iBAAyBJ,WAAW,EAApC,CAAQK,YAAR,cAAQA,YAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CACA;AACA;AACA,iBAAyBC,WAAW,CAAC,SAACU,KAAD,QAAWA,CAAAA,KAAK,CAACC,OAAjB,EAAD,CAApC,CAAQC,YAAR,cAAQA,YAAR,CACA,GAAMC,CAAAA,iBAAiB,CAAGD,YAAY,CAACE,IAAb,CAAkB,SAACC,UAAD,QAAgBA,CAAAA,UAAU,CAACC,IAAX,GAAoB,WAApC,EAAlB,CAA1B,CAEAnB,SAAS,CAAC,UAAM,CACdY,QAAQ,CAACR,eAAe,EAAhB,CAAR,CACD,CAFQ,CAEN,CAACQ,QAAD,CAFM,CAAT,CAIA,mBACE,KAAC,IAAD,EAAM,KAAK,CAAC,uCAAZ,uBACE,MAAC,SAAD,EAAW,QAAQ,CAAED,YAAY,CAAG,KAAH,CAAW,IAA5C,wBACE,KAAC,iBAAD,EACE,OAAO,CAAC,oBADV,CAEE,KAAK,CAAE,CACL,CAAES,IAAI,CAAE,WAAR,CAAqBC,IAAI,CAAEhB,cAAc,CAACiB,IAA1C,CADK,CAEL,CAAEF,IAAI,CAAE,UAAR,CAAoBC,IAAI,CAAEhB,cAAc,CAACkB,QAAf,CAAwBC,UAAlD,CAFK,CAGL,CAAEJ,IAAI,CAAE,YAAR,CAHK,CAFT,EADF,cAUE,KAAC,qBAAD,EAAuB,YAAY,CAAEJ,iBAArC,EAVF,GADF,EADF,CAgBD","sourcesContent":["import { useEffect } from 'react';\r\n// import { paramCase } from 'change-case';\r\n// import { useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getSettingsList } from '../../redux/slices/settings';\r\n// import { getWordList } from '../../redux/slices/prohibitedword';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport ParameterSettingsForm from '../../components/_dashboard/settings/ParameterSettingsForm';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function ParameterSettings() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  // const { pathname } = useLocation();\r\n  // const { word } = useParams();\r\n  const { settingsList } = useSelector((state) => state.setting);\r\n  const parameterSettings = settingsList.find((settingRow) => settingRow.type === 'parameter');\r\n\r\n  useEffect(() => {\r\n    dispatch(getSettingsList());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page title=\"Settings: Parameter Settings | Locals\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Parameter Settings\"\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            { name: 'Settings', href: PATH_DASHBOARD.settings.parameters },\r\n            { name: 'Parameters' }\r\n          ]}\r\n        />\r\n\r\n        <ParameterSettingsForm settingsData={parameterSettings} />\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}