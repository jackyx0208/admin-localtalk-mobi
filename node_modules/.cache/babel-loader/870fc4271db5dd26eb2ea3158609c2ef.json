{"ast":null,"code":"import{useEffect}from'react';import{paramCase}from'change-case';import{useParams,useLocation}from'react-router-dom';// material\nimport{Container}from'@material-ui/core';// redux\nimport{useDispatch,useSelector}from'../../redux/store';import{getWordList}from'../../redux/slices/blocklimitedword';// routes\nimport{PATH_DASHBOARD}from'../../routes/paths';// hooks\nimport useSettings from'../../hooks/useSettings';// components\nimport Page from'../../components/Page';import HeaderBreadcrumbs from'../../components/HeaderBreadcrumbs';import BlockLimitedWordNewForm from'../../components/_dashboard/blocklimitedwords/BlockLimitedWordNewForm';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function BlockLimitedWordCreate(){var _useSettings=useSettings(),themeStretch=_useSettings.themeStretch;var dispatch=useDispatch();var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useParams=useParams(),word=_useParams.word;var _useSelector=useSelector(function(state){return state.blocklimitedword;}),wordList=_useSelector.wordList;var isEdit=pathname.includes('edit');var currentWord=wordList.find(function(blocklimitedwords){return paramCase(blocklimitedwords.word)===word;});useEffect(function(){dispatch(getWordList());},[dispatch]);return/*#__PURE__*/_jsx(Page,{title:\"Word Restrication: Create a new block limited word | Locals\",children:/*#__PURE__*/_jsxs(Container,{maxWidth:themeStretch?false:'lg',children:[/*#__PURE__*/_jsx(HeaderBreadcrumbs,{heading:!isEdit?'Create a new block limited word':'Edit block limited word',links:[{name:'List of Block Limited Words',href:PATH_DASHBOARD.blocklimitedwords.root}]}),/*#__PURE__*/_jsx(BlockLimitedWordNewForm,{isEdit:isEdit,currentWord:currentWord})]})});}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/pages/dashboard/BlockLimitedWordCreate.js"],"names":["useEffect","paramCase","useParams","useLocation","Container","useDispatch","useSelector","getWordList","PATH_DASHBOARD","useSettings","Page","HeaderBreadcrumbs","BlockLimitedWordNewForm","BlockLimitedWordCreate","themeStretch","dispatch","pathname","word","state","blocklimitedword","wordList","isEdit","includes","currentWord","find","blocklimitedwords","name","href","root"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,SAAT,KAA0B,aAA1B,CACA,OAASC,SAAT,CAAoBC,WAApB,KAAuC,kBAAvC,CACA;AACA,OAASC,SAAT,KAA0B,mBAA1B,CACA;AACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,mBAAzC,CACA,OAASC,WAAT,KAA4B,qCAA5B,CACA;AACA,OAASC,cAAT,KAA+B,oBAA/B,CACA;AACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CACA;AACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,oCAA9B,CACA,MAAOC,CAAAA,uBAAP,KAAoC,uEAApC,CAEA;wFAEA,cAAe,SAASC,CAAAA,sBAAT,EAAkC,CAC/C,iBAAyBJ,WAAW,EAApC,CAAQK,YAAR,cAAQA,YAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CACA,iBAAqBF,WAAW,EAAhC,CAAQa,QAAR,cAAQA,QAAR,CACA,eAAiBd,SAAS,EAA1B,CAAQe,IAAR,YAAQA,IAAR,CACA,iBAAqBX,WAAW,CAAC,SAACY,KAAD,QAAWA,CAAAA,KAAK,CAACC,gBAAjB,EAAD,CAAhC,CAAQC,QAAR,cAAQA,QAAR,CACA,GAAMC,CAAAA,MAAM,CAAGL,QAAQ,CAACM,QAAT,CAAkB,MAAlB,CAAf,CACA,GAAMC,CAAAA,WAAW,CAAGH,QAAQ,CAACI,IAAT,CAAc,SAACC,iBAAD,QAAuBxB,CAAAA,SAAS,CAACwB,iBAAiB,CAACR,IAAnB,CAAT,GAAsCA,IAA7D,EAAd,CAApB,CAEAjB,SAAS,CAAC,UAAM,CACde,QAAQ,CAACR,WAAW,EAAZ,CAAR,CACD,CAFQ,CAEN,CAACQ,QAAD,CAFM,CAAT,CAIA,mBACE,KAAC,IAAD,EAAM,KAAK,CAAC,6DAAZ,uBACE,MAAC,SAAD,EAAW,QAAQ,CAAED,YAAY,CAAG,KAAH,CAAW,IAA5C,wBACE,KAAC,iBAAD,EACE,OAAO,CAAE,CAACO,MAAD,CAAU,iCAAV,CAA8C,yBADzD,CAEE,KAAK,CAAE,CAAC,CAAEK,IAAI,CAAE,6BAAR,CAAuCC,IAAI,CAAEnB,cAAc,CAACiB,iBAAf,CAAiCG,IAA9E,CAAD,CAFT,EADF,cAME,KAAC,uBAAD,EAAyB,MAAM,CAAEP,MAAjC,CAAyC,WAAW,CAAEE,WAAtD,EANF,GADF,EADF,CAYD","sourcesContent":["import { useEffect } from 'react';\r\nimport { paramCase } from 'change-case';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getWordList } from '../../redux/slices/blocklimitedword';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport BlockLimitedWordNewForm from '../../components/_dashboard/blocklimitedwords/BlockLimitedWordNewForm';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function BlockLimitedWordCreate() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const { pathname } = useLocation();\r\n  const { word } = useParams();\r\n  const { wordList } = useSelector((state) => state.blocklimitedword);\r\n  const isEdit = pathname.includes('edit');\r\n  const currentWord = wordList.find((blocklimitedwords) => paramCase(blocklimitedwords.word) === word);\r\n\r\n  useEffect(() => {\r\n    dispatch(getWordList());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page title=\"Word Restrication: Create a new block limited word | Locals\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={!isEdit ? 'Create a new block limited word' : 'Edit block limited word'}\r\n          links={[{ name: 'List of Block Limited Words', href: PATH_DASHBOARD.blocklimitedwords.root }]}\r\n        />\r\n\r\n        <BlockLimitedWordNewForm isEdit={isEdit} currentWord={currentWord} />\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}