{"ast":null,"code":"import _regeneratorRuntime from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect}from'react';import{useNavigate,useParams,useLocation}from'react-router-dom';// material\nimport{Box,Divider}from'@material-ui/core';// redux\nimport{useDispatch,useSelector}from'../../../redux/store';import{addRecipients,onSendMessage,getConversation,getParticipants,markConversationAsRead,resetActiveConversation}from'../../../redux/slices/chat';// routes\nimport{PATH_DASHBOARD}from'../../../routes/paths';//\nimport ChatRoom from'./ChatRoom';import ChatMessageList from'./ChatMessageList';import ChatHeaderDetail from'./ChatHeaderDetail';import ChatMessageInput from'./ChatMessageInput';import ChatHeaderCompose from'./ChatHeaderCompose';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var conversationSelector=function conversationSelector(state){var _state$chat=state.chat,conversations=_state$chat.conversations,activeConversationId=_state$chat.activeConversationId;var conversation=conversations.byId[activeConversationId];if(conversation){return conversation;}return{id:null,messages:[],participants:[],unreadMessages:0};};export default function ChatWindow(){var dispatch=useDispatch();var navigate=useNavigate();var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useParams=useParams(),conversationKey=_useParams.conversationKey;var _useSelector=useSelector(function(state){return state.chat;}),contacts=_useSelector.contacts,recipients=_useSelector.recipients,participants=_useSelector.participants,activeConversationId=_useSelector.activeConversationId;var conversation=useSelector(function(state){return conversationSelector(state);});var mode=conversationKey?'DETAIL':'COMPOSE';var displayParticipants=participants.filter(function(item){return item._id!=='8864c717-587d-472a-929a-8e5f298024da-0';});useEffect(function(){var getDetails=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(getParticipants(conversationKey));try{dispatch(getConversation(conversationKey));}catch(error){console.error(error);navigate(PATH_DASHBOARD.chat.new);}case 2:case\"end\":return _context.stop();}}},_callee);}));return function getDetails(){return _ref.apply(this,arguments);};}();if(conversationKey){getDetails();}else if(activeConversationId){dispatch(resetActiveConversation());}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[conversationKey]);useEffect(function(){if(activeConversationId){dispatch(markConversationAsRead(activeConversationId));}},[dispatch,activeConversationId]);var handleAddRecipient=function handleAddRecipient(recipient){dispatch(addRecipients(recipient));};var handleSendMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:try{dispatch(onSendMessage(value));}catch(error){console.error(error);}case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function handleSendMessage(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Box,{sx:{flexGrow:1,display:'flex',flexDirection:'column'},children:[mode==='DETAIL'?/*#__PURE__*/_jsx(ChatHeaderDetail,{participants:displayParticipants}):/*#__PURE__*/_jsx(ChatHeaderCompose,{recipients:recipients,contacts:Object.values(contacts.byId),onAddRecipient:handleAddRecipient}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsxs(Box,{sx:{flexGrow:1,display:'flex',overflow:'hidden'},children:[/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexGrow:1,flexDirection:'column'},children:[/*#__PURE__*/_jsx(ChatMessageList,{conversation:conversation}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsx(ChatMessageInput,{conversationId:activeConversationId,conversationKey:conversationKey,onSend:handleSendMessage,disabled:pathname===PATH_DASHBOARD.chat.new})]}),mode==='DETAIL'&&/*#__PURE__*/_jsx(ChatRoom,{conversation:conversation,participants:displayParticipants})]})]});}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/_dashboard/chat/ChatWindow.js"],"names":["useEffect","useNavigate","useParams","useLocation","Box","Divider","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","PATH_DASHBOARD","ChatRoom","ChatMessageList","ChatHeaderDetail","ChatMessageInput","ChatHeaderCompose","conversationSelector","state","chat","conversations","activeConversationId","conversation","byId","id","messages","participants","unreadMessages","ChatWindow","dispatch","navigate","pathname","conversationKey","contacts","recipients","mode","displayParticipants","filter","item","_id","getDetails","error","console","new","handleAddRecipient","recipient","handleSendMessage","value","flexGrow","display","flexDirection","Object","values","overflow"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Box, Divider } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../../redux/store';\r\nimport {\r\n  addRecipients,\r\n  onSendMessage,\r\n  getConversation,\r\n  getParticipants,\r\n  markConversationAsRead,\r\n  resetActiveConversation\r\n} from '../../../redux/slices/chat';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\nimport ChatRoom from './ChatRoom';\r\nimport ChatMessageList from './ChatMessageList';\r\nimport ChatHeaderDetail from './ChatHeaderDetail';\r\nimport ChatMessageInput from './ChatMessageInput';\r\nimport ChatHeaderCompose from './ChatHeaderCompose';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst conversationSelector = (state) => {\r\n  const { conversations, activeConversationId } = state.chat;\r\n  const conversation = conversations.byId[activeConversationId];\r\n  if (conversation) {\r\n    return conversation;\r\n  }\r\n  return {\r\n    id: null,\r\n    messages: [],\r\n    participants: [],\r\n    unreadMessages: 0\r\n  };\r\n};\r\n\r\nexport default function ChatWindow() {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { pathname } = useLocation();\r\n  const { conversationKey } = useParams();\r\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.chat);\r\n  const conversation = useSelector((state) => conversationSelector(state));\r\n  const mode = conversationKey ? 'DETAIL' : 'COMPOSE';\r\n\r\n  const displayParticipants = participants.filter((item) => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\r\n\r\n  useEffect(() => {\r\n    const getDetails = async () => {\r\n      dispatch(getParticipants(conversationKey));\r\n      try {\r\n        dispatch(getConversation(conversationKey));\r\n      } catch (error) {\r\n        console.error(error);\r\n        navigate(PATH_DASHBOARD.chat.new);\r\n      }\r\n    };\r\n    if (conversationKey) {\r\n      getDetails();\r\n    } else if (activeConversationId) {\r\n      dispatch(resetActiveConversation());\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [conversationKey]);\r\n\r\n  useEffect(() => {\r\n    if (activeConversationId) {\r\n      dispatch(markConversationAsRead(activeConversationId));\r\n    }\r\n  }, [dispatch, activeConversationId]);\r\n\r\n  const handleAddRecipient = (recipient) => {\r\n    dispatch(addRecipients(recipient));\r\n  };\r\n\r\n  const handleSendMessage = async (value) => {\r\n    try {\r\n      dispatch(onSendMessage(value));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\r\n      {mode === 'DETAIL' ? (\r\n        <ChatHeaderDetail participants={displayParticipants} />\r\n      ) : (\r\n        <ChatHeaderCompose\r\n          recipients={recipients}\r\n          contacts={Object.values(contacts.byId)}\r\n          onAddRecipient={handleAddRecipient}\r\n        />\r\n      )}\r\n\r\n      <Divider />\r\n\r\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\r\n        <Box sx={{ display: 'flex', flexGrow: 1, flexDirection: 'column' }}>\r\n          <ChatMessageList conversation={conversation} />\r\n\r\n          <Divider />\r\n\r\n          <ChatMessageInput\r\n            conversationId={activeConversationId}\r\n            conversationKey={conversationKey}\r\n            onSend={handleSendMessage}\r\n            disabled={pathname === PATH_DASHBOARD.chat.new}\r\n          />\r\n        </Box>\r\n\r\n        {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}