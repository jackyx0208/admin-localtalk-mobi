{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(react+node)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\_dashboard\\\\general-app\\\\AppTotalChart.js\";\nimport { merge } from 'lodash';\nimport { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactApexChart from 'react-apexcharts'; // material\n\nimport { Card, CardHeader, Box, TextField } from '@material-ui/core'; //\n\nimport moment from 'moment';\nimport { BaseOptionChart } from '../../charts';\nimport axios from '../../../utils/axios'; // ----------------------------------------------------------------------\n// const CHART_DATA = [\n//   {\n//     category: 'statistics',\n//     data: [\n//       // { name: 'Active Users', data: [0, 0, 0, 0, 0, 13, 16, 17, 26, 40] },\n//       { name: 'Online Users', data: [0, 0, 0, 0, 22, 45, 42, 12, 12, 5] },\n//       { name: 'Registered Users', data: [0, 0, 0, 0, 1, 19, 20, 24, 36, 51] }\n//       // { name: 'App Installed', data: [0, 10, 21, 35, 40, 49, 62, 69, 91, 102] },\n//       // { name: 'App Download', data: [0, 12, 25, 38, 42, 58, 64, 72, 97, 120] }\n//     ]\n//   }\n// ];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAppTotalChart.propTypes = {\n  chartDate: PropTypes.string\n};\nexport default function AppTotalChart({\n  chartDate\n}) {\n  const [seriesData, setSeriesData] = useState('statistics');\n  const [dateCount, setDateCount] = useState(10);\n  const [chartData, setChartData] = useState([]);\n  useEffect(() => {\n    async function getAnalytics() {\n      if (chartDate) {\n        const toDateObj = new Date(chartDate);\n        const fromDateObj = new Date(toDateObj.getTime() - (dateCount - 1) * 1000 * 60 * 60 * 24);\n        const fromDate = moment(fromDateObj).format('YYYY-MM-DD');\n        const toDate = chartDate;\n        const {\n          data\n        } = await axios.get(`/analytics/logs/${fromDate}/${toDate}`);\n\n        if (data.error) {\n          const zeroValueArr = [];\n\n          for (let i = 0; i < dateCount; i += 1) {\n            zeroValueArr.push(0);\n          }\n\n          const CHART_DATA = [{\n            category: 'statistics',\n            data: [{\n              name: 'Online Users',\n              data: zeroValueArr\n            }, {\n              name: 'Registered Users',\n              data: zeroValueArr\n            }]\n          }];\n          setChartData(CHART_DATA);\n        } else {\n          const {\n            logs\n          } = data;\n          const onlineUserArr = [];\n          const registerUserArr = [];\n\n          for (let i = 0; i < dateCount; i += 1) {\n            onlineUserArr.push(0);\n            registerUserArr.push(0);\n          }\n\n          const lastDateLimit = new Date(toDateObj.getTime() + 1000 * 60 * 60 * 24);\n\n          for (let i = 0; i < logs.length; i += 1) {\n            const logDate = new Date(logs[i].date);\n            console.log(logs[i]);\n\n            if (logDate >= fromDateObj && logDate < lastDateLimit) {\n              const index = Math.floor((logDate.getTime() - fromDateObj.getTime()) / (1000 * 60 * 60 * 24));\n              onlineUserArr[index] = logs[i].online_user_num;\n              registerUserArr[index] = logs[i].register_user_num;\n            }\n          }\n\n          const CHART_DATA = [{\n            category: 'statistics',\n            data: [{\n              name: 'Online Users',\n              data: onlineUserArr\n            }, {\n              name: 'Registered Users',\n              data: registerUserArr\n            }]\n          }];\n          setChartData(CHART_DATA);\n        }\n      }\n    }\n\n    getAnalytics();\n  }, [chartDate]);\n\n  const handleChangeSeriesData = event => {\n    setSeriesData(Number(event.target.value));\n  };\n\n  const daysList = num => {\n    const date = new Date(chartDate);\n    const datesCollection = [];\n\n    for (let i = 0; i < num; i += 1) {\n      const newDate = new Date(date.getTime() - i * 1000 * 60 * 60 * 24);\n      const dateFromatStr = moment(newDate).format('YYYY MMM DD'); // datesCollection.unshift(`${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}`);\n\n      datesCollection.unshift(dateFromatStr);\n    }\n\n    return datesCollection;\n  };\n\n  const chartOptions = merge(BaseOptionChart(), {\n    xaxis: {\n      categories: daysList(dateCount)\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      title: \"Statistics Chart\",\n      subheader: \"Growing Fast\" // action={\n      //   <TextField\n      //     select\n      //     fullWidth\n      //     value={seriesData}\n      //     SelectProps={{ native: true }}\n      //     onChange={handleChangeSeriesData}\n      //     sx={{\n      //       '& fieldset': { border: '0 !important' },\n      //       '& select': { pl: 1, py: 0.5, pr: '24px !important', typography: 'subtitle2' },\n      //       '& .MuiOutlinedInput-root': { borderRadius: 0.75, bgcolor: 'background.neutral' },\n      //       '& .MuiNativeSelect-icon': { top: 4, right: 0, width: 20, height: 20 }\n      //     }}\n      //   >\n      //     {CHART_DATA.map((option) => (\n      //       <option key={option.category} value={option.category}>\n      //         {option.category}\n      //       </option>\n      //     ))}\n      //   </TextField>\n      // }\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), chartData.map(item => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3,\n        mx: 3\n      },\n      dir: \"ltr\",\n      children: item.category === seriesData && /*#__PURE__*/_jsxDEV(ReactApexChart, {\n        type: \"line\",\n        series: item.data,\n        options: chartOptions,\n        height: 364\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this)\n    }, item.category, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi(react+node)/pro/toptalk-adminpanel/src/components/_dashboard/general-app/AppTotalChart.js"],"names":["merge","useEffect","useState","PropTypes","ReactApexChart","Card","CardHeader","Box","TextField","moment","BaseOptionChart","axios","AppTotalChart","propTypes","chartDate","string","seriesData","setSeriesData","dateCount","setDateCount","chartData","setChartData","getAnalytics","toDateObj","Date","fromDateObj","getTime","fromDate","format","toDate","data","get","error","zeroValueArr","i","push","CHART_DATA","category","name","logs","onlineUserArr","registerUserArr","lastDateLimit","length","logDate","date","console","log","index","Math","floor","online_user_num","register_user_num","handleChangeSeriesData","event","Number","target","value","daysList","num","datesCollection","newDate","dateFromatStr","unshift","chartOptions","xaxis","categories","map","item","mt","mx"],"mappings":"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","sourcesContent":["import { merge } from 'lodash';\r\nimport { useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactApexChart from 'react-apexcharts';\r\n// material\r\nimport { Card, CardHeader, Box, TextField } from '@material-ui/core';\r\n//\r\nimport moment from 'moment';\r\nimport { BaseOptionChart } from '../../charts';\r\nimport axios from '../../../utils/axios';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n// const CHART_DATA = [\r\n//   {\r\n//     category: 'statistics',\r\n//     data: [\r\n//       // { name: 'Active Users', data: [0, 0, 0, 0, 0, 13, 16, 17, 26, 40] },\r\n//       { name: 'Online Users', data: [0, 0, 0, 0, 22, 45, 42, 12, 12, 5] },\r\n//       { name: 'Registered Users', data: [0, 0, 0, 0, 1, 19, 20, 24, 36, 51] }\r\n//       // { name: 'App Installed', data: [0, 10, 21, 35, 40, 49, 62, 69, 91, 102] },\r\n//       // { name: 'App Download', data: [0, 12, 25, 38, 42, 58, 64, 72, 97, 120] }\r\n//     ]\r\n//   }\r\n// ];\r\n\r\nAppTotalChart.propTypes = {\r\n  chartDate: PropTypes.string\r\n};\r\n\r\nexport default function AppTotalChart({ chartDate }) {\r\n  const [seriesData, setSeriesData] = useState('statistics');\r\n  const [dateCount, setDateCount] = useState(10);\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function getAnalytics() {\r\n      if (chartDate) {\r\n        const toDateObj = new Date(chartDate);\r\n        const fromDateObj = new Date(toDateObj.getTime() - (dateCount - 1) * 1000 * 60 * 60 * 24);\r\n        const fromDate = moment(fromDateObj).format('YYYY-MM-DD');\r\n        const toDate = chartDate;\r\n        const { data } = await axios.get(`/analytics/logs/${fromDate}/${toDate}`);\r\n        if (data.error) {\r\n          const zeroValueArr = [];\r\n          for (let i = 0; i < dateCount; i += 1) {\r\n            zeroValueArr.push(0);\r\n          }\r\n          const CHART_DATA = [\r\n            {\r\n              category: 'statistics',\r\n              data: [\r\n                { name: 'Online Users', data: zeroValueArr },\r\n                { name: 'Registered Users', data: zeroValueArr }\r\n              ]\r\n            }\r\n          ];\r\n          setChartData(CHART_DATA);\r\n        } else {\r\n          const { logs } = data;\r\n          const onlineUserArr = [];\r\n          const registerUserArr = [];\r\n          for (let i = 0; i < dateCount; i += 1) {\r\n            onlineUserArr.push(0);\r\n            registerUserArr.push(0);\r\n          }\r\n          const lastDateLimit = new Date(toDateObj.getTime() + 1000 * 60 * 60 * 24);\r\n          for (let i = 0; i < logs.length; i += 1) {\r\n            const logDate = new Date(logs[i].date);\r\n            console.log(logs[i]);\r\n            if (logDate >= fromDateObj && logDate < lastDateLimit) {\r\n              const index = Math.floor((logDate.getTime() - fromDateObj.getTime()) / (1000 * 60 * 60 * 24));\r\n              onlineUserArr[index] = logs[i].online_user_num;\r\n              registerUserArr[index] = logs[i].register_user_num;\r\n            }\r\n          }\r\n          const CHART_DATA = [\r\n            {\r\n              category: 'statistics',\r\n              data: [\r\n                { name: 'Online Users', data: onlineUserArr },\r\n                { name: 'Registered Users', data: registerUserArr }\r\n              ]\r\n            }\r\n          ];\r\n          setChartData(CHART_DATA);\r\n        }\r\n      }\r\n    }\r\n    getAnalytics();\r\n  }, [chartDate]);\r\n\r\n  const handleChangeSeriesData = (event) => {\r\n    setSeriesData(Number(event.target.value));\r\n  };\r\n\r\n  const daysList = (num) => {\r\n    const date = new Date(chartDate);\r\n    const datesCollection = [];\r\n\r\n    for (let i = 0; i < num; i += 1) {\r\n      const newDate = new Date(date.getTime() - i * 1000 * 60 * 60 * 24);\r\n      const dateFromatStr = moment(newDate).format('YYYY MMM DD');\r\n      // datesCollection.unshift(`${newDate.getDate()}/${newDate.getMonth() + 1}/${newDate.getFullYear()}`);\r\n      datesCollection.unshift(dateFromatStr);\r\n    }\r\n\r\n    return datesCollection;\r\n  };\r\n\r\n  const chartOptions = merge(BaseOptionChart(), {\r\n    xaxis: {\r\n      categories: daysList(dateCount)\r\n    }\r\n  });\r\n\r\n  return (\r\n    <Card>\r\n      <CardHeader\r\n        title=\"Statistics Chart\"\r\n        subheader=\"Growing Fast\"\r\n        // action={\r\n        //   <TextField\r\n        //     select\r\n        //     fullWidth\r\n        //     value={seriesData}\r\n        //     SelectProps={{ native: true }}\r\n        //     onChange={handleChangeSeriesData}\r\n        //     sx={{\r\n        //       '& fieldset': { border: '0 !important' },\r\n        //       '& select': { pl: 1, py: 0.5, pr: '24px !important', typography: 'subtitle2' },\r\n        //       '& .MuiOutlinedInput-root': { borderRadius: 0.75, bgcolor: 'background.neutral' },\r\n        //       '& .MuiNativeSelect-icon': { top: 4, right: 0, width: 20, height: 20 }\r\n        //     }}\r\n        //   >\r\n        //     {CHART_DATA.map((option) => (\r\n        //       <option key={option.category} value={option.category}>\r\n        //         {option.category}\r\n        //       </option>\r\n        //     ))}\r\n        //   </TextField>\r\n        // }\r\n      />\r\n\r\n      {chartData.map((item) => (\r\n        <Box key={item.category} sx={{ mt: 3, mx: 3 }} dir=\"ltr\">\r\n          {item.category === seriesData && (\r\n            <ReactApexChart type=\"line\" series={item.data} options={chartOptions} height={364} />\r\n          )}\r\n        </Box>\r\n      ))}\r\n    </Card>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}