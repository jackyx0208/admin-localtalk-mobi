{"ast":null,"code":"import _regeneratorRuntime from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect}from'react';import{useNavigate,useParams,useLocation}from'react-router-dom';// material\nimport{Box,Divider}from'@material-ui/core';// redux\nimport{useDispatch,useSelector}from'../../../redux/store';import{addRecipients,onSendMessage,getConversation,getParticipants,markConversationAsRead,resetActiveConversation}from'../../../redux/slices/privatechat';import{getSettingsList}from'../../../redux/slices/settings';// routes\nimport{PATH_DASHBOARD}from'../../../routes/paths';//\n// import ChatRoom from './ChatRoom';\nimport ChatMessageList from'./ChatMessageList';import ChatHeaderDetail from'./ChatHeaderDetail';import ChatMessageInput from'./ChatMessageInput';import ChatHeaderCompose from'./ChatHeaderCompose';// hooks\nimport useAuth from'../../../hooks/useAuth';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var conversationSelector=function conversationSelector(state){var _state$privatechat=state.privatechat,conversations=_state$privatechat.conversations,activeConversationId=_state$privatechat.activeConversationId;var conversation=conversations.byId[activeConversationId];if(conversation){return conversation;}return{id:null,messages:[],lastMessage:null,users:[]};};export default function ChatWindow(_ref){var socket=_ref.socket;var dispatch=useDispatch();var navigate=useNavigate();var _useAuth=useAuth(),user=_useAuth.user;var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useParams=useParams(),opponentId=_useParams.opponentId;var _useSelector=useSelector(function(state){return state.privatechat;}),contacts=_useSelector.contacts,recipients=_useSelector.recipients,participants=_useSelector.participants,activeConversationId=_useSelector.activeConversationId;var conversation=useSelector(function(state){return conversationSelector(state);});var _useSelector2=useSelector(function(state){return state.setting;}),settingsList=_useSelector2.settingsList;var parameterSettings=settingsList.find(function(settingRow){return settingRow.type==='parameter';});useEffect(function(){dispatch(getSettingsList());},[dispatch]);var mode=opponentId?'DETAIL':'COMPOSE';var displayParticipants=participants.filter(function(item){return item._id!=='8864c717-587d-472a-929a-8e5f298024da-0';});useEffect(function(){if(activeConversationId){console.log('get conversation',activeConversationId);dispatch(getConversation(activeConversationId));// dispatch(markConversationAsRead(activeConversationId));\n}},[dispatch,activeConversationId]);useEffect(function(){// console.log(conversation);\nif(conversation.lastMessage&&conversation.lastMessage.users_see_message.indexOf(user._id)===-1){socket.emit('makeLastMessageAsSeen',JSON.stringify({chatId:activeConversationId,userId:user._id}));}},[dispatch,conversation]);var handleAddRecipient=function handleAddRecipient(recipient){dispatch(addRecipients(recipient));};var handleSendMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value){var message;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{dispatch(onSendMessage(value));message={sender_id:value.senderId,sender_name:value.senderName,messageId:value.messageId,chat_id:value.conversationId,message:value.message,receiver_id:value.receiverId,message_type:value.messageType,imgs:value.imgs};console.log('socket new message',message);socket.emit('new_message',JSON.stringify(message));}catch(error){console.error(error);}case 1:case\"end\":return _context.stop();}}},_callee);}));return function handleSendMessage(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Box,{sx:{flexGrow:1,display:'flex',flexDirection:'column'},children:[/*#__PURE__*/_jsx(ChatHeaderDetail,{participants:displayParticipants}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsx(Box,{sx:{flexGrow:1,display:'flex',overflow:'hidden'},children:/*#__PURE__*/_jsxs(Box,{sx:{display:'flex',flexGrow:1,flexDirection:'column'},children:[/*#__PURE__*/_jsx(ChatMessageList,{conversation:conversation}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsx(ChatMessageInput,{conversationId:activeConversationId,opponentId:opponentId,onSend:handleSendMessage,disabled:pathname===PATH_DASHBOARD.chat.private,messageMaxLen:parameterSettings&&Number(parameterSettings.settings.message_limit_character_num)})]})})]});}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/components/_dashboard/privatechat/ChatWindow.js"],"names":["useEffect","useNavigate","useParams","useLocation","Box","Divider","useDispatch","useSelector","addRecipients","onSendMessage","getConversation","getParticipants","markConversationAsRead","resetActiveConversation","getSettingsList","PATH_DASHBOARD","ChatMessageList","ChatHeaderDetail","ChatMessageInput","ChatHeaderCompose","useAuth","conversationSelector","state","privatechat","conversations","activeConversationId","conversation","byId","id","messages","lastMessage","users","ChatWindow","socket","dispatch","navigate","user","pathname","opponentId","contacts","recipients","participants","setting","settingsList","parameterSettings","find","settingRow","type","mode","displayParticipants","filter","item","_id","console","log","users_see_message","indexOf","emit","JSON","stringify","chatId","userId","handleAddRecipient","recipient","handleSendMessage","value","message","sender_id","senderId","sender_name","senderName","messageId","chat_id","conversationId","receiver_id","receiverId","message_type","messageType","imgs","error","flexGrow","display","flexDirection","overflow","chat","private","Number","settings","message_limit_character_num"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\r\nimport { useNavigate, useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Box, Divider } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../../redux/store';\r\nimport {\r\n  addRecipients,\r\n  onSendMessage,\r\n  getConversation,\r\n  getParticipants,\r\n  markConversationAsRead,\r\n  resetActiveConversation\r\n} from '../../../redux/slices/privatechat';\r\nimport { getSettingsList } from '../../../redux/slices/settings';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n//\r\n// import ChatRoom from './ChatRoom';\r\nimport ChatMessageList from './ChatMessageList';\r\nimport ChatHeaderDetail from './ChatHeaderDetail';\r\nimport ChatMessageInput from './ChatMessageInput';\r\nimport ChatHeaderCompose from './ChatHeaderCompose';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst conversationSelector = (state) => {\r\n  const { conversations, activeConversationId } = state.privatechat;\r\n  const conversation = conversations.byId[activeConversationId];\r\n  if (conversation) {\r\n    return conversation;\r\n  }\r\n  return {\r\n    id: null,\r\n    messages: [],\r\n    lastMessage: null,\r\n    users: []\r\n  };\r\n};\r\n\r\nexport default function ChatWindow({ socket }) {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { user } = useAuth();\r\n  const { pathname } = useLocation();\r\n  const { opponentId } = useParams();\r\n  const { contacts, recipients, participants, activeConversationId } = useSelector((state) => state.privatechat);\r\n  const conversation = useSelector((state) => conversationSelector(state));\r\n\r\n  const { settingsList } = useSelector((state) => state.setting);\r\n  const parameterSettings = settingsList.find((settingRow) => settingRow.type === 'parameter');\r\n\r\n  useEffect(() => {\r\n    dispatch(getSettingsList());\r\n  }, [dispatch]);\r\n\r\n  const mode = opponentId ? 'DETAIL' : 'COMPOSE';\r\n\r\n  const displayParticipants = participants.filter((item) => item._id !== '8864c717-587d-472a-929a-8e5f298024da-0');\r\n\r\n  useEffect(() => {\r\n    if (activeConversationId) {\r\n      console.log('get conversation', activeConversationId);\r\n      dispatch(getConversation(activeConversationId));\r\n      // dispatch(markConversationAsRead(activeConversationId));\r\n    }\r\n  }, [dispatch, activeConversationId]);\r\n\r\n  useEffect(() => {\r\n    // console.log(conversation);\r\n    if (conversation.lastMessage && conversation.lastMessage.users_see_message.indexOf(user._id) === -1) {\r\n      socket.emit('makeLastMessageAsSeen', JSON.stringify({ chatId: activeConversationId, userId: user._id }));\r\n    }\r\n  }, [dispatch, conversation]);\r\n\r\n  const handleAddRecipient = (recipient) => {\r\n    dispatch(addRecipients(recipient));\r\n  };\r\n\r\n  const handleSendMessage = async (value) => {\r\n    try {\r\n      dispatch(onSendMessage(value));\r\n      const message = {\r\n        sender_id: value.senderId,\r\n        sender_name: value.senderName,\r\n        messageId: value.messageId,\r\n        chat_id: value.conversationId,\r\n        message: value.message,\r\n        receiver_id: value.receiverId,\r\n        message_type: value.messageType,\r\n        imgs: value.imgs\r\n      };\r\n      console.log('socket new message', message);\r\n      socket.emit('new_message', JSON.stringify(message));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>\r\n      {/* {mode === 'DETAIL' ? (\r\n        <ChatHeaderDetail participants={displayParticipants} />\r\n      ) : (\r\n        <ChatHeaderCompose\r\n          recipients={recipients}\r\n          contacts={Object.values(contacts.byId)}\r\n          onAddRecipient={handleAddRecipient}\r\n        />\r\n      )} */}\r\n      <ChatHeaderDetail participants={displayParticipants} />\r\n\r\n      <Divider />\r\n\r\n      <Box sx={{ flexGrow: 1, display: 'flex', overflow: 'hidden' }}>\r\n        <Box sx={{ display: 'flex', flexGrow: 1, flexDirection: 'column' }}>\r\n          <ChatMessageList conversation={conversation} />\r\n\r\n          <Divider />\r\n\r\n          <ChatMessageInput\r\n            conversationId={activeConversationId}\r\n            opponentId={opponentId}\r\n            onSend={handleSendMessage}\r\n            disabled={pathname === PATH_DASHBOARD.chat.private}\r\n            messageMaxLen={parameterSettings && Number(parameterSettings.settings.message_limit_character_num)}\r\n          />\r\n        </Box>\r\n\r\n        {/* {mode === 'DETAIL' && <ChatRoom conversation={conversation} participants={displayParticipants} />} */}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}