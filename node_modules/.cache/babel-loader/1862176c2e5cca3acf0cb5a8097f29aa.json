{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(react+node)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\pages\\\\dashboard\\\\BlockLimitedWordCreate.js\";\nimport { useEffect } from 'react';\nimport { paramCase } from 'change-case';\nimport { useParams, useLocation } from 'react-router-dom'; // material\n\nimport { Container } from '@material-ui/core'; // redux\n\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getWordList } from '../../redux/slices/blocklimitedword'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // hooks\n\nimport useSettings from '../../hooks/useSettings'; // components\n\nimport Page from '../../components/Page';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\nimport BlockLimitedWordNewForm from '../../components/_dashboard/blocklimitedwords/BlockLimitedWordNewForm'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BlockLimitedWordCreate() {\n  const {\n    themeStretch\n  } = useSettings();\n  const dispatch = useDispatch();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    word\n  } = useParams();\n  const {\n    wordList\n  } = useSelector(state => state.blocklimitedword);\n  const isEdit = pathname.includes('edit');\n  const currentWord = wordList.find(blocklimitedwords => paramCase(blocklimitedwords.word) === word);\n  useEffect(() => {\n    dispatch(getWordList());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Word Restrication: Create a new block limited word | Locals\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: themeStretch ? false : 'lg',\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: !isEdit ? 'Create a new block limited word' : 'Edit block limited word',\n        links: [{\n          name: 'List of Block Limited Words',\n          href: PATH_DASHBOARD.blocklimitedwords.root\n        }]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlockLimitedWordNewForm, {\n        isEdit: isEdit,\n        currentWord: currentWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi(react+node)/pro/toptalk-adminpanel/src/pages/dashboard/BlockLimitedWordCreate.js"],"names":["useEffect","paramCase","useParams","useLocation","Container","useDispatch","useSelector","getWordList","PATH_DASHBOARD","useSettings","Page","HeaderBreadcrumbs","BlockLimitedWordNewForm","BlockLimitedWordCreate","themeStretch","dispatch","pathname","word","wordList","state","blocklimitedword","isEdit","includes","currentWord","find","blocklimitedwords","name","href","root"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,kBAAvC,C,CACA;;AACA,SAASC,SAAT,QAA0B,mBAA1B,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC;AACA,SAASC,WAAT,QAA4B,qCAA5B,C,CACA;;AACA,SAASC,cAAT,QAA+B,oBAA/B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,yBAAxB,C,CACA;;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,iBAAP,MAA8B,oCAA9B;AACA,OAAOC,uBAAP,MAAoC,uEAApC,C,CAEA;;;AAEA,eAAe,SAASC,sBAAT,GAAkC;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAmBL,WAAW,EAApC;AACA,QAAMM,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAeb,WAAW,EAAhC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAWf,SAAS,EAA1B;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAeZ,WAAW,CAAEa,KAAD,IAAWA,KAAK,CAACC,gBAAlB,CAAhC;AACA,QAAMC,MAAM,GAAGL,QAAQ,CAACM,QAAT,CAAkB,MAAlB,CAAf;AACA,QAAMC,WAAW,GAAGL,QAAQ,CAACM,IAAT,CAAeC,iBAAD,IAAuBxB,SAAS,CAACwB,iBAAiB,CAACR,IAAnB,CAAT,KAAsCA,IAA3E,CAApB;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,QAAQ,CAACR,WAAW,EAAZ,CAAR;AACD,GAFQ,EAEN,CAACQ,QAAD,CAFM,CAAT;AAIA,sBACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAC,6DAAZ;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAED,YAAY,GAAG,KAAH,GAAW,IAA5C;AAAA,8BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAE,CAACO,MAAD,GAAU,iCAAV,GAA8C,yBADzD;AAEE,QAAA,KAAK,EAAE,CAAC;AAAEK,UAAAA,IAAI,EAAE,6BAAR;AAAuCC,UAAAA,IAAI,EAAEnB,cAAc,CAACiB,iBAAf,CAAiCG;AAA9E,SAAD;AAFT;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,uBAAD;AAAyB,QAAA,MAAM,EAAEP,MAAjC;AAAyC,QAAA,WAAW,EAAEE;AAAtD;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD","sourcesContent":["import { useEffect } from 'react';\r\nimport { paramCase } from 'change-case';\r\nimport { useParams, useLocation } from 'react-router-dom';\r\n// material\r\nimport { Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getWordList } from '../../redux/slices/blocklimitedword';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport BlockLimitedWordNewForm from '../../components/_dashboard/blocklimitedwords/BlockLimitedWordNewForm';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function BlockLimitedWordCreate() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const { pathname } = useLocation();\r\n  const { word } = useParams();\r\n  const { wordList } = useSelector((state) => state.blocklimitedword);\r\n  const isEdit = pathname.includes('edit');\r\n  const currentWord = wordList.find((blocklimitedwords) => paramCase(blocklimitedwords.word) === word);\r\n\r\n  useEffect(() => {\r\n    dispatch(getWordList());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Page title=\"Word Restrication: Create a new block limited word | Locals\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading={!isEdit ? 'Create a new block limited word' : 'Edit block limited word'}\r\n          links={[{ name: 'List of Block Limited Words', href: PATH_DASHBOARD.blocklimitedwords.root }]}\r\n        />\r\n\r\n        <BlockLimitedWordNewForm isEdit={isEdit} currentWord={currentWord} />\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}