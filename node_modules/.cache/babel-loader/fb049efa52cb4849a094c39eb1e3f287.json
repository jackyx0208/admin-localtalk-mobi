{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(back)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\_dashboard\\\\chat\\\\ChatConversationItem.js\";\nimport { last } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { formatDistanceToNowStrict } from 'date-fns'; // material\n\nimport { styled } from '@material-ui/core/styles';\nimport { Box, Avatar, ListItemText, ListItemAvatar, ListItemButton } from '@material-ui/core'; //\n\nimport BadgeStatus from '../../BadgeStatus'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AVATAR_SIZE = 48;\nconst AVATAR_SIZE_GROUP = 32;\nconst RootStyle = styled(ListItemButton)(({\n  theme\n}) => ({\n  padding: theme.spacing(1.5, 3),\n  transition: theme.transitions.create('all')\n}));\nconst AvatarWrapperStyle = styled('div')({\n  position: 'relative',\n  width: AVATAR_SIZE,\n  height: AVATAR_SIZE,\n  '& .MuiAvatar-img': {\n    borderRadius: '50%'\n  },\n  '& .MuiAvatar-root': {\n    width: '100%',\n    height: '100%'\n  }\n}); // ----------------------------------------------------------------------\n\nconst getDetails = (conversation, currentUserId) => {\n  const otherParticipants = conversation.participants.filter(participant => participant.id !== currentUserId);\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\n  let displayText = '';\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\n\n  if (lastMessage) {\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\n    displayText = `${sender}${message}`;\n  }\n\n  return {\n    otherParticipants,\n    displayNames,\n    displayText\n  };\n};\n\nChatConversationItem.propTypes = {\n  isSelected: PropTypes.bool,\n  conversation: PropTypes.object.isRequired,\n  isOpenSidebar: PropTypes.bool,\n  onSelectConversation: PropTypes.func\n};\nexport default function ChatConversationItem({\n  isSelected,\n  conversation,\n  onSelectConversation,\n  isOpenSidebar,\n  ...other\n}) {\n  const details = getDetails(conversation, '8864c717-587d-472a-929a-8e5f298024da-0');\n  const displayLastActivity = last(conversation.messages).createdAt;\n  const isGroup = details.otherParticipants.length > 1;\n  const isUnread = conversation.unreadCount > 0;\n  const isOnlineGroup = isGroup && details.otherParticipants.map(item => item.status).includes('online');\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    disableGutters: true,\n    onClick: onSelectConversation,\n    sx: { ...(isSelected && {\n        bgcolor: 'action.selected'\n      })\n    },\n    ...other,\n    children: [/*#__PURE__*/_jsxDEV(ListItemAvatar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: { ...(isGroup && {\n            position: 'relative',\n            width: AVATAR_SIZE,\n            height: AVATAR_SIZE,\n            '& .avatarWrapper': {\n              position: 'absolute',\n              width: AVATAR_SIZE_GROUP,\n              height: AVATAR_SIZE_GROUP,\n              '&:nth-of-type(1)': {\n                left: 0,\n                zIndex: 9,\n                bottom: 2,\n                '& .MuiAvatar-root': {\n                  border: theme => `solid 2px ${theme.palette.background.paper}`\n                }\n              },\n              '&:nth-of-type(2)': {\n                top: 2,\n                right: 0\n              }\n            }\n          })\n        },\n        children: [details.otherParticipants.slice(0, 2).map(participant => /*#__PURE__*/_jsxDEV(AvatarWrapperStyle, {\n          className: \"avatarWrapper\",\n          children: [/*#__PURE__*/_jsxDEV(Avatar, {\n            alt: participant.name,\n            src: participant.avatar\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), !isGroup && /*#__PURE__*/_jsxDEV(BadgeStatus, {\n            status: participant.status,\n            sx: {\n              right: 2,\n              bottom: 2,\n              position: 'absolute'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)]\n        }, participant._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)), isOnlineGroup && /*#__PURE__*/_jsxDEV(BadgeStatus, {\n          status: \"online\",\n          sx: {\n            right: 2,\n            bottom: 2,\n            position: 'absolute'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), isOpenSidebar && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n        primary: details.displayNames,\n        primaryTypographyProps: {\n          noWrap: true,\n          variant: 'subtitle2'\n        },\n        secondary: details.displayText,\n        secondaryTypographyProps: {\n          noWrap: true,\n          variant: isUnread ? 'subtitle2' : 'body2',\n          color: isUnread ? 'textPrimary' : 'textSecondary'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          ml: 2,\n          height: 44,\n          display: 'flex',\n          alignItems: 'flex-end',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mb: 1.25,\n            fontSize: 12,\n            lineHeight: '22px',\n            whiteSpace: 'nowrap',\n            color: 'text.disabled'\n          },\n          children: formatDistanceToNowStrict(new Date(displayLastActivity), {\n            addSuffix: false\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), isUnread && /*#__PURE__*/_jsxDEV(BadgeStatus, {\n          status: \"unread\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_c = ChatConversationItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatConversationItem\");","map":{"version":3,"sources":["E:/projects/localtalk.mobi(back)/pro/toptalk-adminpanel/src/components/_dashboard/chat/ChatConversationItem.js"],"names":["last","PropTypes","formatDistanceToNowStrict","styled","Box","Avatar","ListItemText","ListItemAvatar","ListItemButton","BadgeStatus","AVATAR_SIZE","AVATAR_SIZE_GROUP","RootStyle","theme","padding","spacing","transition","transitions","create","AvatarWrapperStyle","position","width","height","borderRadius","getDetails","conversation","currentUserId","otherParticipants","participants","filter","participant","id","displayNames","reduce","names","name","join","displayText","lastMessage","messages","length","sender","senderId","message","contentType","body","ChatConversationItem","propTypes","isSelected","bool","object","isRequired","isOpenSidebar","onSelectConversation","func","other","details","displayLastActivity","createdAt","isGroup","isUnread","unreadCount","isOnlineGroup","map","item","status","includes","bgcolor","left","zIndex","bottom","border","palette","background","paper","top","right","slice","avatar","_id","noWrap","variant","color","ml","display","alignItems","flexDirection","mb","fontSize","lineHeight","whiteSpace","Date","addSuffix"],"mappings":"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","sourcesContent":["import { last } from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { formatDistanceToNowStrict } from 'date-fns';\r\n// material\r\nimport { styled } from '@material-ui/core/styles';\r\nimport { Box, Avatar, ListItemText, ListItemAvatar, ListItemButton } from '@material-ui/core';\r\n//\r\nimport BadgeStatus from '../../BadgeStatus';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst AVATAR_SIZE = 48;\r\nconst AVATAR_SIZE_GROUP = 32;\r\n\r\nconst RootStyle = styled(ListItemButton)(({ theme }) => ({\r\n  padding: theme.spacing(1.5, 3),\r\n  transition: theme.transitions.create('all')\r\n}));\r\n\r\nconst AvatarWrapperStyle = styled('div')({\r\n  position: 'relative',\r\n  width: AVATAR_SIZE,\r\n  height: AVATAR_SIZE,\r\n  '& .MuiAvatar-img': { borderRadius: '50%' },\r\n  '& .MuiAvatar-root': { width: '100%', height: '100%' }\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst getDetails = (conversation, currentUserId) => {\r\n  const otherParticipants = conversation.participants.filter((participant) => participant.id !== currentUserId);\r\n  const displayNames = otherParticipants.reduce((names, participant) => [...names, participant.name], []).join(', ');\r\n  let displayText = '';\r\n  const lastMessage = conversation.messages[conversation.messages.length - 1];\r\n  if (lastMessage) {\r\n    const sender = lastMessage.senderId === currentUserId ? 'You: ' : '';\r\n    const message = lastMessage.contentType === 'image' ? 'Sent a photo' : lastMessage.body;\r\n    displayText = `${sender}${message}`;\r\n  }\r\n  return { otherParticipants, displayNames, displayText };\r\n};\r\n\r\nChatConversationItem.propTypes = {\r\n  isSelected: PropTypes.bool,\r\n  conversation: PropTypes.object.isRequired,\r\n  isOpenSidebar: PropTypes.bool,\r\n  onSelectConversation: PropTypes.func\r\n};\r\n\r\nexport default function ChatConversationItem({\r\n  isSelected,\r\n  conversation,\r\n  onSelectConversation,\r\n  isOpenSidebar,\r\n  ...other\r\n}) {\r\n  const details = getDetails(conversation, '8864c717-587d-472a-929a-8e5f298024da-0');\r\n\r\n  const displayLastActivity = last(conversation.messages).createdAt;\r\n  const isGroup = details.otherParticipants.length > 1;\r\n  const isUnread = conversation.unreadCount > 0;\r\n  const isOnlineGroup = isGroup && details.otherParticipants.map((item) => item.status).includes('online');\r\n\r\n  return (\r\n    <RootStyle\r\n      disableGutters\r\n      onClick={onSelectConversation}\r\n      sx={{\r\n        ...(isSelected && { bgcolor: 'action.selected' })\r\n      }}\r\n      {...other}\r\n    >\r\n      <ListItemAvatar>\r\n        <Box\r\n          sx={{\r\n            ...(isGroup && {\r\n              position: 'relative',\r\n              width: AVATAR_SIZE,\r\n              height: AVATAR_SIZE,\r\n              '& .avatarWrapper': {\r\n                position: 'absolute',\r\n                width: AVATAR_SIZE_GROUP,\r\n                height: AVATAR_SIZE_GROUP,\r\n                '&:nth-of-type(1)': {\r\n                  left: 0,\r\n                  zIndex: 9,\r\n                  bottom: 2,\r\n                  '& .MuiAvatar-root': {\r\n                    border: (theme) => `solid 2px ${theme.palette.background.paper}`\r\n                  }\r\n                },\r\n                '&:nth-of-type(2)': { top: 2, right: 0 }\r\n              }\r\n            })\r\n          }}\r\n        >\r\n          {details.otherParticipants.slice(0, 2).map((participant) => (\r\n            <AvatarWrapperStyle className=\"avatarWrapper\" key={participant._id}>\r\n              <Avatar alt={participant.name} src={participant.avatar} />\r\n              {!isGroup && (\r\n                <BadgeStatus status={participant.status} sx={{ right: 2, bottom: 2, position: 'absolute' }} />\r\n              )}\r\n            </AvatarWrapperStyle>\r\n          ))}\r\n          {isOnlineGroup && <BadgeStatus status=\"online\" sx={{ right: 2, bottom: 2, position: 'absolute' }} />}\r\n        </Box>\r\n      </ListItemAvatar>\r\n\r\n      {isOpenSidebar && (\r\n        <>\r\n          <ListItemText\r\n            primary={details.displayNames}\r\n            primaryTypographyProps={{\r\n              noWrap: true,\r\n              variant: 'subtitle2'\r\n            }}\r\n            secondary={details.displayText}\r\n            secondaryTypographyProps={{\r\n              noWrap: true,\r\n              variant: isUnread ? 'subtitle2' : 'body2',\r\n              color: isUnread ? 'textPrimary' : 'textSecondary'\r\n            }}\r\n          />\r\n\r\n          <Box\r\n            sx={{\r\n              ml: 2,\r\n              height: 44,\r\n              display: 'flex',\r\n              alignItems: 'flex-end',\r\n              flexDirection: 'column'\r\n            }}\r\n          >\r\n            <Box\r\n              sx={{\r\n                mb: 1.25,\r\n                fontSize: 12,\r\n                lineHeight: '22px',\r\n                whiteSpace: 'nowrap',\r\n                color: 'text.disabled'\r\n              }}\r\n            >\r\n              {formatDistanceToNowStrict(new Date(displayLastActivity), {\r\n                addSuffix: false\r\n              })}\r\n            </Box>\r\n            {isUnread && <BadgeStatus status=\"unread\" size=\"small\" />}\r\n          </Box>\r\n        </>\r\n      )}\r\n    </RootStyle>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}