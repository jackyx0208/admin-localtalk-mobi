{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(back)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\_dashboard\\\\user\\\\account\\\\AccountBilling.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useState } from 'react';\nimport { useSnackbar } from 'notistack5'; // material\n\nimport { Box, Grid, Card, Button, Typography, Stack } from '@material-ui/core'; // redux\n\nimport { useSelector } from '../../../../redux/store'; // utils\n\nimport fakeRequest from '../../../../utils/fakeRequest'; //\n\nimport AccountBillingAddressBook from './AccountBillingAddressBook';\nimport AccountBillingPaymentMethod from './AccountBillingPaymentMethod';\nimport AccountBillingInvoiceHistory from './AccountBillingInvoiceHistory'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AccountBilling() {\n  _s();\n\n  const {\n    cards,\n    invoices,\n    addressBook\n  } = useSelector(state => state.user);\n  const [open, setOpen] = useState(false);\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const NewCardSchema = Yup.object().shape({\n    cardName: Yup.string().required('Name is required'),\n    cardNumber: Yup.string().required('Card number is required'),\n    cardExpired: Yup.string().required('Card expired is required'),\n    cardCvv: Yup.string().required('Cvv is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      cardName: '',\n      cardNumber: '',\n      cardExpired: '',\n      cardCvv: ''\n    },\n    validationSchema: NewCardSchema,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      await fakeRequest(500);\n      handleCancel();\n      resetForm();\n      setSubmitting(false);\n      alert(JSON.stringify(values, null, 2));\n      enqueueSnackbar('Add card success', {\n        variant: 'success'\n      });\n    }\n  });\n\n  const handleOpenAddCard = () => {\n    setOpen(prevOpen => !prevOpen);\n  };\n\n  const handleCancel = () => {\n    setOpen(false);\n    formik.resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 5,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 8,\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"overline\",\n            sx: {\n              mb: 3,\n              display: 'block',\n              color: 'text.secondary'\n            },\n            children: \"Your Plan\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: \"Premium\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: {\n                xs: 2,\n                sm: 0\n              },\n              position: {\n                sm: 'absolute'\n              },\n              top: {\n                sm: 24\n              },\n              right: {\n                sm: 24\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              color: \"inherit\",\n              variant: \"outlined\",\n              sx: {\n                mr: 1\n              },\n              children: \"Cancel plan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"small\",\n              variant: \"outlined\",\n              children: \"Upgrade plan\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccountBillingPaymentMethod, {\n          cards: cards,\n          formik: formik,\n          isOpen: open,\n          onOpen: handleOpenAddCard,\n          onCancel: handleCancel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AccountBillingAddressBook, {\n          addressBook: addressBook\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      md: 4,\n      children: /*#__PURE__*/_jsxDEV(AccountBillingInvoiceHistory, {\n        invoices: invoices\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountBilling, \"AlA80QxN4TjLr9BfK3fZbE2ong0=\", false, function () {\n  return [useSelector, useSnackbar, useFormik];\n});\n\n_c = AccountBilling;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountBilling\");","map":{"version":3,"sources":["E:/projects/localtalk.mobi(back)/pro/toptalk-adminpanel/src/components/_dashboard/user/account/AccountBilling.js"],"names":["Yup","useFormik","useState","useSnackbar","Box","Grid","Card","Button","Typography","Stack","useSelector","fakeRequest","AccountBillingAddressBook","AccountBillingPaymentMethod","AccountBillingInvoiceHistory","AccountBilling","cards","invoices","addressBook","state","user","open","setOpen","enqueueSnackbar","NewCardSchema","object","shape","cardName","string","required","cardNumber","cardExpired","cardCvv","formik","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","handleCancel","alert","JSON","stringify","variant","handleOpenAddCard","prevOpen","p","mb","display","color","mt","xs","sm","position","top","right","mr"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport { useFormik } from 'formik';\r\nimport { useState } from 'react';\r\nimport { useSnackbar } from 'notistack5';\r\n// material\r\nimport { Box, Grid, Card, Button, Typography, Stack } from '@material-ui/core';\r\n// redux\r\nimport { useSelector } from '../../../../redux/store';\r\n// utils\r\nimport fakeRequest from '../../../../utils/fakeRequest';\r\n//\r\nimport AccountBillingAddressBook from './AccountBillingAddressBook';\r\nimport AccountBillingPaymentMethod from './AccountBillingPaymentMethod';\r\nimport AccountBillingInvoiceHistory from './AccountBillingInvoiceHistory';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountBilling() {\r\n  const { cards, invoices, addressBook } = useSelector((state) => state.user);\r\n  const [open, setOpen] = useState(false);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const NewCardSchema = Yup.object().shape({\r\n    cardName: Yup.string().required('Name is required'),\r\n    cardNumber: Yup.string().required('Card number is required'),\r\n    cardExpired: Yup.string().required('Card expired is required'),\r\n    cardCvv: Yup.string().required('Cvv is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      cardName: '',\r\n      cardNumber: '',\r\n      cardExpired: '',\r\n      cardCvv: ''\r\n    },\r\n    validationSchema: NewCardSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm }) => {\r\n      await fakeRequest(500);\r\n      handleCancel();\r\n      resetForm();\r\n      setSubmitting(false);\r\n      alert(JSON.stringify(values, null, 2));\r\n      enqueueSnackbar('Add card success', { variant: 'success' });\r\n    }\r\n  });\r\n\r\n  const handleOpenAddCard = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setOpen(false);\r\n    formik.resetForm();\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={5}>\r\n      <Grid item xs={12} md={8}>\r\n        <Stack spacing={3}>\r\n          <Card sx={{ p: 3 }}>\r\n            <Typography variant=\"overline\" sx={{ mb: 3, display: 'block', color: 'text.secondary' }}>\r\n              Your Plan\r\n            </Typography>\r\n            <Typography variant=\"h4\">Premium</Typography>\r\n            <Box\r\n              sx={{\r\n                mt: { xs: 2, sm: 0 },\r\n                position: { sm: 'absolute' },\r\n                top: { sm: 24 },\r\n                right: { sm: 24 }\r\n              }}\r\n            >\r\n              <Button size=\"small\" color=\"inherit\" variant=\"outlined\" sx={{ mr: 1 }}>\r\n                Cancel plan\r\n              </Button>\r\n              <Button size=\"small\" variant=\"outlined\">\r\n                Upgrade plan\r\n              </Button>\r\n            </Box>\r\n          </Card>\r\n\r\n          <AccountBillingPaymentMethod\r\n            cards={cards}\r\n            formik={formik}\r\n            isOpen={open}\r\n            onOpen={handleOpenAddCard}\r\n            onCancel={handleCancel}\r\n          />\r\n\r\n          <AccountBillingAddressBook addressBook={addressBook} />\r\n        </Stack>\r\n      </Grid>\r\n\r\n      <Grid item xs={12} md={4}>\r\n        <AccountBillingInvoiceHistory invoices={invoices} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}