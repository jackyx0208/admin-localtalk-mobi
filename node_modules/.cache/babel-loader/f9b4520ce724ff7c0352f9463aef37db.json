{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi\\\\mobilechat-adminpanel\\\\src\\\\theme\\\\index.js\";\nimport PropTypes from 'prop-types';\nimport { useMemo } from 'react'; // material\n\nimport { CssBaseline } from '@material-ui/core';\nimport { createTheme, ThemeProvider, StyledEngineProvider } from '@material-ui/core/styles'; // hooks\n\nimport useSettings from '../hooks/useSettings'; //\n\nimport shape from './shape';\nimport palette from './palette';\nimport typography from './typography';\nimport breakpoints from './breakpoints';\nimport GlobalStyles from './globalStyles';\nimport componentsOverride from './overrides';\nimport shadows, { customShadows } from './shadows'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nThemeConfig.propTypes = {\n  children: PropTypes.node\n};\nexport default function ThemeConfig({\n  children\n}) {\n  const {\n    themeMode,\n    themeDirection\n  } = useSettings();\n  const isLight = themeMode === 'light';\n  const themeOptions = useMemo(() => ({\n    palette: isLight ? { ...palette.light,\n      mode: 'light'\n    } : { ...palette.dark,\n      mode: 'dark'\n    },\n    shape,\n    typography,\n    breakpoints,\n    direction: themeDirection,\n    shadows: isLight ? shadows.light : shadows.dark,\n    customShadows: isLight ? customShadows.light : customShadows.dark\n  }), [isLight, themeDirection]);\n  const theme = createTheme(themeOptions);\n  theme.components = componentsOverride(theme);\n  return /*#__PURE__*/_jsxDEV(StyledEngineProvider, {\n    injectFirst: true,\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/theme/index.js"],"names":["PropTypes","useMemo","CssBaseline","createTheme","ThemeProvider","StyledEngineProvider","useSettings","shape","palette","typography","breakpoints","GlobalStyles","componentsOverride","shadows","customShadows","ThemeConfig","propTypes","children","node","themeMode","themeDirection","isLight","themeOptions","light","mode","dark","direction","theme","components"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AAEA,SAASC,OAAT,QAAwB,OAAxB,C,CACA;;AACA,SAASC,WAAT,QAA4B,mBAA5B;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,oBAArC,QAAiE,0BAAjE,C,CACA;;AACA,OAAOC,WAAP,MAAwB,sBAAxB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,kBAAP,MAA+B,aAA/B;AACA,OAAOC,OAAP,IAAkBC,aAAlB,QAAuC,WAAvC,C,CAEA;;;AAEAC,WAAW,CAACC,SAAZ,GAAwB;AACtBC,EAAAA,QAAQ,EAAEjB,SAAS,CAACkB;AADE,CAAxB;AAIA,eAAe,SAASH,WAAT,CAAqB;AAAEE,EAAAA;AAAF,CAArB,EAAmC;AAChD,QAAM;AAAEE,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAgCd,WAAW,EAAjD;AACA,QAAMe,OAAO,GAAGF,SAAS,KAAK,OAA9B;AAEA,QAAMG,YAAY,GAAGrB,OAAO,CAC1B,OAAO;AACLO,IAAAA,OAAO,EAAEa,OAAO,GAAG,EAAE,GAAGb,OAAO,CAACe,KAAb;AAAoBC,MAAAA,IAAI,EAAE;AAA1B,KAAH,GAAyC,EAAE,GAAGhB,OAAO,CAACiB,IAAb;AAAmBD,MAAAA,IAAI,EAAE;AAAzB,KADpD;AAELjB,IAAAA,KAFK;AAGLE,IAAAA,UAHK;AAILC,IAAAA,WAJK;AAKLgB,IAAAA,SAAS,EAAEN,cALN;AAMLP,IAAAA,OAAO,EAAEQ,OAAO,GAAGR,OAAO,CAACU,KAAX,GAAmBV,OAAO,CAACY,IANtC;AAOLX,IAAAA,aAAa,EAAEO,OAAO,GAAGP,aAAa,CAACS,KAAjB,GAAyBT,aAAa,CAACW;AAPxD,GAAP,CAD0B,EAU1B,CAACJ,OAAD,EAAUD,cAAV,CAV0B,CAA5B;AAaA,QAAMO,KAAK,GAAGxB,WAAW,CAACmB,YAAD,CAAzB;AACAK,EAAAA,KAAK,CAACC,UAAN,GAAmBhB,kBAAkB,CAACe,KAAD,CAArC;AAEA,sBACE,QAAC,oBAAD;AAAsB,IAAA,WAAW,MAAjC;AAAA,2BACE,QAAC,aAAD;AAAe,MAAA,KAAK,EAAEA,KAAtB;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAFF,EAGGV,QAHH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nimport { useMemo } from 'react';\r\n// material\r\nimport { CssBaseline } from '@material-ui/core';\r\nimport { createTheme, ThemeProvider, StyledEngineProvider } from '@material-ui/core/styles';\r\n// hooks\r\nimport useSettings from '../hooks/useSettings';\r\n//\r\nimport shape from './shape';\r\nimport palette from './palette';\r\nimport typography from './typography';\r\nimport breakpoints from './breakpoints';\r\nimport GlobalStyles from './globalStyles';\r\nimport componentsOverride from './overrides';\r\nimport shadows, { customShadows } from './shadows';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nThemeConfig.propTypes = {\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default function ThemeConfig({ children }) {\r\n  const { themeMode, themeDirection } = useSettings();\r\n  const isLight = themeMode === 'light';\r\n\r\n  const themeOptions = useMemo(\r\n    () => ({\r\n      palette: isLight ? { ...palette.light, mode: 'light' } : { ...palette.dark, mode: 'dark' },\r\n      shape,\r\n      typography,\r\n      breakpoints,\r\n      direction: themeDirection,\r\n      shadows: isLight ? shadows.light : shadows.dark,\r\n      customShadows: isLight ? customShadows.light : customShadows.dark\r\n    }),\r\n    [isLight, themeDirection]\r\n  );\r\n\r\n  const theme = createTheme(themeOptions);\r\n  theme.components = componentsOverride(theme);\r\n\r\n  return (\r\n    <StyledEngineProvider injectFirst>\r\n      <ThemeProvider theme={theme}>\r\n        <CssBaseline />\r\n        <GlobalStyles />\r\n        {children}\r\n      </ThemeProvider>\r\n    </StyledEngineProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}