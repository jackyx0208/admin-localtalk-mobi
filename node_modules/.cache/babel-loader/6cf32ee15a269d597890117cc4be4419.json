{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(back)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\authentication\\\\verify-code\\\\VerifyCodeForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik'; // material\n\nimport { OutlinedInput, FormHelperText, Stack } from '@material-ui/core';\nimport { LoadingButton } from '@material-ui/lab'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; // utils\n\nimport fakeRequest from '../../../utils/fakeRequest'; // ----------------------------------------------------------------------\n// eslint-disable-next-line consistent-return\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction maxLength(object) {\n  if (object.target.value.length > object.target.maxLength) {\n    return object.target.value = object.target.value.slice(0, object.target.maxLength);\n  }\n}\n\nexport default function VerifyCodeForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.number().required('Code is required'),\n    code2: Yup.number().required('Code is required'),\n    code3: Yup.number().required('Code is required'),\n    code4: Yup.number().required('Code is required'),\n    code5: Yup.number().required('Code is required'),\n    code6: Yup.number().required('Code is required')\n  });\n  const formik = useFormik({\n    initialValues: {\n      code1: '',\n      code2: '',\n      code3: '',\n      code4: '',\n      code5: '',\n      code6: ''\n    },\n    validationSchema: VerifyCodeSchema,\n    onSubmit: async () => {\n      await fakeRequest(500);\n      enqueueSnackbar('Verify success', {\n        variant: 'success'\n      });\n      navigate(PATH_DASHBOARD.root);\n    }\n  });\n  const {\n    values,\n    errors,\n    isValid,\n    touched,\n    isSubmitting,\n    handleSubmit,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      autoComplete: \"off\",\n      noValidate: true,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Stack, {\n        direction: \"row\",\n        spacing: 2,\n        justifyContent: \"center\",\n        children: Object.keys(values).map(item => /*#__PURE__*/_jsxDEV(OutlinedInput, { ...getFieldProps(item),\n          type: \"number\",\n          placeholder: \"-\",\n          onInput: maxLength,\n          error: Boolean(touched[item] && errors[item]),\n          inputProps: {\n            maxLength: 1,\n            sx: {\n              p: 0,\n              textAlign: 'center',\n              width: {\n                xs: 36,\n                sm: 56\n              },\n              height: {\n                xs: 36,\n                sm: 56\n              }\n            }\n          }\n        }, item, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n        error: !isValid,\n        style: {\n          textAlign: 'right'\n        },\n        children: !isValid && 'Code is required'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        loading: isSubmitting,\n        sx: {\n          mt: 3\n        },\n        children: \"Verify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VerifyCodeForm, \"ShlbACjtCU8GDduOfYBiimtQsaY=\", false, function () {\n  return [useNavigate, useSnackbar, useFormik];\n});\n\n_c = VerifyCodeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyCodeForm\");","map":{"version":3,"sources":["E:/projects/localtalk.mobi(back)/pro/toptalk-adminpanel/src/components/authentication/verify-code/VerifyCodeForm.js"],"names":["Yup","useSnackbar","useNavigate","Form","FormikProvider","useFormik","OutlinedInput","FormHelperText","Stack","LoadingButton","PATH_DASHBOARD","fakeRequest","maxLength","object","target","value","length","slice","VerifyCodeForm","navigate","enqueueSnackbar","VerifyCodeSchema","shape","code1","number","required","code2","code3","code4","code5","code6","formik","initialValues","validationSchema","onSubmit","variant","root","values","errors","isValid","touched","isSubmitting","handleSubmit","getFieldProps","Object","keys","map","item","Boolean","sx","p","textAlign","width","xs","sm","height","mt"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n// material\r\nimport { OutlinedInput, FormHelperText, Stack } from '@material-ui/core';\r\nimport { LoadingButton } from '@material-ui/lab';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n// utils\r\nimport fakeRequest from '../../../utils/fakeRequest';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\n// eslint-disable-next-line consistent-return\r\nfunction maxLength(object) {\r\n  if (object.target.value.length > object.target.maxLength) {\r\n    return (object.target.value = object.target.value.slice(0, object.target.maxLength));\r\n  }\r\n}\r\n\r\nexport default function VerifyCodeForm() {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const VerifyCodeSchema = Yup.object().shape({\r\n    code1: Yup.number().required('Code is required'),\r\n    code2: Yup.number().required('Code is required'),\r\n    code3: Yup.number().required('Code is required'),\r\n    code4: Yup.number().required('Code is required'),\r\n    code5: Yup.number().required('Code is required'),\r\n    code6: Yup.number().required('Code is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      code1: '',\r\n      code2: '',\r\n      code3: '',\r\n      code4: '',\r\n      code5: '',\r\n      code6: ''\r\n    },\r\n    validationSchema: VerifyCodeSchema,\r\n    onSubmit: async () => {\r\n      await fakeRequest(500);\r\n      enqueueSnackbar('Verify success', { variant: 'success' });\r\n      navigate(PATH_DASHBOARD.root);\r\n    }\r\n  });\r\n\r\n  const { values, errors, isValid, touched, isSubmitting, handleSubmit, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form autoComplete=\"off\" noValidate onSubmit={handleSubmit}>\r\n        <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\r\n          {Object.keys(values).map((item) => (\r\n            <OutlinedInput\r\n              key={item}\r\n              {...getFieldProps(item)}\r\n              type=\"number\"\r\n              placeholder=\"-\"\r\n              onInput={maxLength}\r\n              error={Boolean(touched[item] && errors[item])}\r\n              inputProps={{\r\n                maxLength: 1,\r\n                sx: {\r\n                  p: 0,\r\n                  textAlign: 'center',\r\n                  width: { xs: 36, sm: 56 },\r\n                  height: { xs: 36, sm: 56 }\r\n                }\r\n              }}\r\n            />\r\n          ))}\r\n        </Stack>\r\n\r\n        <FormHelperText error={!isValid} style={{ textAlign: 'right' }}>\r\n          {!isValid && 'Code is required'}\r\n        </FormHelperText>\r\n\r\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting} sx={{ mt: 3 }}>\r\n          Verify\r\n        </LoadingButton>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}