{"ast":null,"code":"import _regeneratorRuntime from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"E:/projects/localtalk.mobi/mobilechat-adminpanel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import{useParams}from'react-router-dom';import socketio from'socket.io-client';// material\nimport{Card,Container}from'@material-ui/core';// redux\nimport{useDispatch,useSelector}from'../../redux/store';import{getUserList}from'../../redux/slices/user';import{getConversations,getContacts,onConnectChat,getConversation}from'../../redux/slices/privatechat';import{getSettingsList}from'../../redux/slices/settings';// routes\nimport{PATH_DASHBOARD}from'../../routes/paths';// hooks\nimport useSettings from'../../hooks/useSettings';import useAuth from'../../hooks/useAuth';// components\nimport Page from'../../components/Page';import HeaderBreadcrumbs from'../../components/HeaderBreadcrumbs';import{ChatSidebar,ChatWindow,ChatAdminMessageForm}from'../../components/_dashboard/privatechat';import{serverConfig}from'../../config';// ----------------------------------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function PrivateChat(){var _useSettings=useSettings(),themeStretch=_useSettings.themeStretch;var dispatch=useDispatch();var _useAuth=useAuth(),user=_useAuth.user;var _useParams=useParams(),opponentId=_useParams.opponentId;var _useSelector=useSelector(function(state){return state.setting;}),settingsList=_useSelector.settingsList;var chatSettings=settingsList.find(function(settingRow){return settingRow.type==='chat';});var _useSelector2=useSelector(function(state){return state.privatechat;}),activeConversationId=_useSelector2.activeConversationId;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),currentConversationId=_useState2[0],setCurrentCoversationId=_useState2[1];console.log('Private Chat');useEffect(function(){if(opponentId){var lastMessage=(chatSettings===null||chatSettings===void 0?void 0:chatSettings.settings.admin_message)||'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.';dispatch(onConnectChat(user._id,opponentId,lastMessage));}},[dispatch,opponentId]);useEffect(function(){dispatch(getUserList());dispatch(getConversations());dispatch(getContacts());dispatch(getSettingsList());},[dispatch]);var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),socket=_useState4[0],setSocket=_useState4[1];useEffect(function(){var newSocket=socketio.connect(\"\".concat(serverConfig.socketUrl,\"/api/message\"),{// EIO: 2,\n// reconnect: true,\ntransports:['websocket']});newSocket.on('connect',function(){console.log('Successfully connected');});newSocket.on('connect_failed',function(){console.log('Connection Failed');});newSocket.on('disconnect',function(){console.log('Disconnected');});newSocket.on('msgReceive',handleReceiveMessage);newSocket.on('onDeleted',handleDeleteMessage);newSocket.on('onTyping',onTyping);setSocket(newSocket);return function(){return newSocket.close();};},[setSocket]);useEffect(function(){if(socket&&activeConversationId){if(currentConversationId&&currentConversationId!==activeConversationId){console.log('leaveChat',currentConversationId);socket.emit('leaveChat',JSON.stringify({chatId:currentConversationId}));}console.log('joinChat',activeConversationId);var params={chatId:activeConversationId};socket.emit('joinChat',JSON.stringify(params));setCurrentCoversationId(activeConversationId);}},[socket,dispatch,activeConversationId]);var handleReceiveMessage=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(value){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(activeConversationId,value);if(activeConversationId){dispatch(getConversation(activeConversationId));}case 2:case\"end\":return _context.stop();}}},_callee);}));return function handleReceiveMessage(_x){return _ref.apply(this,arguments);};}();var handleDeleteMessage=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:console.log(value);dispatch(getConversation(activeConversationId));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function handleDeleteMessage(_x2){return _ref2.apply(this,arguments);};}();var onTyping=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(value){return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:console.log(value);case 1:case\"end\":return _context3.stop();}}},_callee3);}));return function onTyping(_x3){return _ref3.apply(this,arguments);};}();var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),roomListSocket=_useState6[0],setRoomListSocket=_useState6[1];useEffect(function(){console.log('RoomList Socket!');var newSocket=socketio.connect(\"\".concat(serverConfig.socketUrl,\"/api/chatRoomList\"),{// reconnect: true,\ntransports:['websocket']});newSocket.on('connect',function(){console.log('Successfully connected: api/chatRoomList');});newSocket.on('updateChatRoomList',handleUpdateChatRoomList);setRoomListSocket(newSocket);return function(){return newSocket.close();};},[setRoomListSocket]);var handleUpdateChatRoomList=function handleUpdateChatRoomList(){console.log('handleUpdateChatRoomList');dispatch(getConversations());};return/*#__PURE__*/_jsx(Page,{title:\"Chat | Locals\",children:/*#__PURE__*/_jsxs(Container,{maxWidth:themeStretch?false:'xl',children:[/*#__PURE__*/_jsx(HeaderBreadcrumbs,{heading:\"Private Chat\",links:[{name:'Dashboard',href:PATH_DASHBOARD.root},{name:'Private Chat'}]}),/*#__PURE__*/_jsx(ChatAdminMessageForm,{chatSettings:chatSettings}),/*#__PURE__*/_jsxs(Card,{sx:{height:'72vh',display:'flex'},children:[/*#__PURE__*/_jsx(ChatSidebar,{}),socket&&/*#__PURE__*/_jsx(ChatWindow,{socket:socket})]})]})});}","map":{"version":3,"sources":["E:/projects/localtalk.mobi/mobilechat-adminpanel/src/pages/dashboard/PrivateChat.js"],"names":["useEffect","useState","useParams","socketio","Card","Container","useDispatch","useSelector","getUserList","getConversations","getContacts","onConnectChat","getConversation","getSettingsList","PATH_DASHBOARD","useSettings","useAuth","Page","HeaderBreadcrumbs","ChatSidebar","ChatWindow","ChatAdminMessageForm","serverConfig","PrivateChat","themeStretch","dispatch","user","opponentId","state","setting","settingsList","chatSettings","find","settingRow","type","privatechat","activeConversationId","currentConversationId","setCurrentCoversationId","console","log","lastMessage","settings","admin_message","_id","socket","setSocket","newSocket","connect","socketUrl","transports","on","handleReceiveMessage","handleDeleteMessage","onTyping","close","emit","JSON","stringify","chatId","params","value","roomListSocket","setRoomListSocket","handleUpdateChatRoomList","name","href","root","height","display"],"mappings":"kfAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,QAAP,KAAqB,kBAArB,CACA;AACA,OAASC,IAAT,CAAeC,SAAf,KAAgC,mBAAhC,CACA;AACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,mBAAzC,CACA,OAASC,WAAT,KAA4B,yBAA5B,CACA,OAASC,gBAAT,CAA2BC,WAA3B,CAAwCC,aAAxC,CAAuDC,eAAvD,KAA8E,gCAA9E,CACA,OAASC,eAAT,KAAgC,6BAAhC,CACA;AACA,OAASC,cAAT,KAA+B,oBAA/B,CACA;AACA,MAAOC,CAAAA,WAAP,KAAwB,yBAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,qBAApB,CACA;AACA,MAAOC,CAAAA,IAAP,KAAiB,uBAAjB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,oCAA9B,CACA,OAASC,WAAT,CAAsBC,UAAtB,CAAkCC,oBAAlC,KAA8D,yCAA9D,CACA,OAASC,YAAT,KAA6B,cAA7B,CAEA;wFAEA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CACpC,iBAAyBR,WAAW,EAApC,CAAQS,YAAR,cAAQA,YAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGnB,WAAW,EAA5B,CACA,aAAiBU,OAAO,EAAxB,CAAQU,IAAR,UAAQA,IAAR,CACA,eAAuBxB,SAAS,EAAhC,CAAQyB,UAAR,YAAQA,UAAR,CACA,iBAAyBpB,WAAW,CAAC,SAACqB,KAAD,QAAWA,CAAAA,KAAK,CAACC,OAAjB,EAAD,CAApC,CAAQC,YAAR,cAAQA,YAAR,CACA,GAAMC,CAAAA,YAAY,CAAGD,YAAY,CAACE,IAAb,CAAkB,SAACC,UAAD,QAAgBA,CAAAA,UAAU,CAACC,IAAX,GAAoB,MAApC,EAAlB,CAArB,CACA,kBAAiC3B,WAAW,CAAC,SAACqB,KAAD,QAAWA,CAAAA,KAAK,CAACO,WAAjB,EAAD,CAA5C,CAAQC,oBAAR,eAAQA,oBAAR,CACA,cAAyDnC,QAAQ,CAAC,IAAD,CAAjE,wCAAOoC,qBAAP,eAA8BC,uBAA9B,eAEAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAEAxC,SAAS,CAAC,UAAM,CACd,GAAI2B,UAAJ,CAAgB,CACd,GAAMc,CAAAA,WAAW,CACf,CAAAV,YAAY,OAAZ,EAAAA,YAAY,SAAZ,QAAAA,YAAY,CAAEW,QAAd,CAAuBC,aAAvB,GACA,gKAFF,CAGAlB,QAAQ,CAACd,aAAa,CAACe,IAAI,CAACkB,GAAN,CAAWjB,UAAX,CAAuBc,WAAvB,CAAd,CAAR,CACD,CACF,CAPQ,CAON,CAAChB,QAAD,CAAWE,UAAX,CAPM,CAAT,CASA3B,SAAS,CAAC,UAAM,CACdyB,QAAQ,CAACjB,WAAW,EAAZ,CAAR,CACAiB,QAAQ,CAAChB,gBAAgB,EAAjB,CAAR,CACAgB,QAAQ,CAACf,WAAW,EAAZ,CAAR,CACAe,QAAQ,CAACZ,eAAe,EAAhB,CAAR,CACD,CALQ,CAKN,CAACY,QAAD,CALM,CAAT,CAOA,eAA4BxB,QAAQ,CAAC,IAAD,CAApC,yCAAO4C,MAAP,eAAeC,SAAf,eAEA9C,SAAS,CAAC,UAAM,CACd,GAAM+C,CAAAA,SAAS,CAAG5C,QAAQ,CAAC6C,OAAT,WAAoB1B,YAAY,CAAC2B,SAAjC,iBAA0D,CAC1E;AACA;AACAC,UAAU,CAAE,CAAC,WAAD,CAH8D,CAA1D,CAAlB,CAKAH,SAAS,CAACI,EAAV,CAAa,SAAb,CAAwB,UAAM,CAC5BZ,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACD,CAFD,EAGAO,SAAS,CAACI,EAAV,CAAa,gBAAb,CAA+B,UAAM,CACnCZ,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACD,CAFD,EAGAO,SAAS,CAACI,EAAV,CAAa,YAAb,CAA2B,UAAM,CAC/BZ,OAAO,CAACC,GAAR,CAAY,cAAZ,EACD,CAFD,EAGAO,SAAS,CAACI,EAAV,CAAa,YAAb,CAA2BC,oBAA3B,EACAL,SAAS,CAACI,EAAV,CAAa,WAAb,CAA0BE,mBAA1B,EACAN,SAAS,CAACI,EAAV,CAAa,UAAb,CAAyBG,QAAzB,EACAR,SAAS,CAACC,SAAD,CAAT,CACA,MAAO,kBAAMA,CAAAA,SAAS,CAACQ,KAAV,EAAN,EAAP,CACD,CApBQ,CAoBN,CAACT,SAAD,CApBM,CAAT,CAsBA9C,SAAS,CAAC,UAAM,CACd,GAAI6C,MAAM,EAAIT,oBAAd,CAAoC,CAClC,GAAIC,qBAAqB,EAAIA,qBAAqB,GAAKD,oBAAvD,CAA6E,CAC3EG,OAAO,CAACC,GAAR,CAAY,WAAZ,CAAyBH,qBAAzB,EACAQ,MAAM,CAACW,IAAP,CACE,WADF,CAEEC,IAAI,CAACC,SAAL,CAAe,CACbC,MAAM,CAAEtB,qBADK,CAAf,CAFF,EAMD,CACDE,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBJ,oBAAxB,EACA,GAAMwB,CAAAA,MAAM,CAAG,CAAED,MAAM,CAAEvB,oBAAV,CAAf,CACAS,MAAM,CAACW,IAAP,CAAY,UAAZ,CAAwBC,IAAI,CAACC,SAAL,CAAeE,MAAf,CAAxB,EACAtB,uBAAuB,CAACF,oBAAD,CAAvB,CACD,CACF,CAhBQ,CAgBN,CAACS,MAAD,CAASpB,QAAT,CAAmBW,oBAAnB,CAhBM,CAAT,CAkBA,GAAMgB,CAAAA,oBAAoB,0FAAG,iBAAOS,KAAP,kHAC3BtB,OAAO,CAACC,GAAR,CAAYJ,oBAAZ,CAAkCyB,KAAlC,EACA,GAAIzB,oBAAJ,CAA0B,CACxBX,QAAQ,CAACb,eAAe,CAACwB,oBAAD,CAAhB,CAAR,CACD,CAJ0B,sDAAH,kBAApBgB,CAAAA,oBAAoB,4CAA1B,CAOA,GAAMC,CAAAA,mBAAmB,2FAAG,kBAAOQ,KAAP,sHAC1BtB,OAAO,CAACC,GAAR,CAAYqB,KAAZ,EACApC,QAAQ,CAACb,eAAe,CAACwB,oBAAD,CAAhB,CAAR,CAF0B,wDAAH,kBAAnBiB,CAAAA,mBAAmB,8CAAzB,CAKA,GAAMC,CAAAA,QAAQ,2FAAG,kBAAOO,KAAP,sHACftB,OAAO,CAACC,GAAR,CAAYqB,KAAZ,EADe,wDAAH,kBAARP,CAAAA,QAAQ,8CAAd,CAIA,eAA4CrD,QAAQ,CAAC,IAAD,CAApD,yCAAO6D,cAAP,eAAuBC,iBAAvB,eAEA/D,SAAS,CAAC,UAAM,CACduC,OAAO,CAACC,GAAR,CAAY,kBAAZ,EACA,GAAMO,CAAAA,SAAS,CAAG5C,QAAQ,CAAC6C,OAAT,WAAoB1B,YAAY,CAAC2B,SAAjC,sBAA+D,CAC/E;AACAC,UAAU,CAAE,CAAC,WAAD,CAFmE,CAA/D,CAAlB,CAIAH,SAAS,CAACI,EAAV,CAAa,SAAb,CAAwB,UAAM,CAC5BZ,OAAO,CAACC,GAAR,CAAY,0CAAZ,EACD,CAFD,EAGAO,SAAS,CAACI,EAAV,CAAa,oBAAb,CAAmCa,wBAAnC,EACAD,iBAAiB,CAAChB,SAAD,CAAjB,CACA,MAAO,kBAAMA,CAAAA,SAAS,CAACQ,KAAV,EAAN,EAAP,CACD,CAZQ,CAYN,CAACQ,iBAAD,CAZM,CAAT,CAcA,GAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,EAAM,CACrCzB,OAAO,CAACC,GAAR,CAAY,0BAAZ,EACAf,QAAQ,CAAChB,gBAAgB,EAAjB,CAAR,CACD,CAHD,CAKA,mBACE,KAAC,IAAD,EAAM,KAAK,CAAC,eAAZ,uBACE,MAAC,SAAD,EAAW,QAAQ,CAAEe,YAAY,CAAG,KAAH,CAAW,IAA5C,wBACE,KAAC,iBAAD,EACE,OAAO,CAAC,cADV,CAEE,KAAK,CAAE,CAAC,CAAEyC,IAAI,CAAE,WAAR,CAAqBC,IAAI,CAAEpD,cAAc,CAACqD,IAA1C,CAAD,CAAmD,CAAEF,IAAI,CAAE,cAAR,CAAnD,CAFT,EADF,cAKE,KAAC,oBAAD,EAAsB,YAAY,CAAElC,YAApC,EALF,cAME,MAAC,IAAD,EAAM,EAAE,CAAE,CAAEqC,MAAM,CAAE,MAAV,CAAkBC,OAAO,CAAE,MAA3B,CAAV,wBACE,KAAC,WAAD,IADF,CAEGxB,MAAM,eAAI,KAAC,UAAD,EAAY,MAAM,CAAEA,MAApB,EAFb,GANF,GADF,EADF,CAeD","sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport socketio from 'socket.io-client';\r\n// material\r\nimport { Card, Container } from '@material-ui/core';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getUserList } from '../../redux/slices/user';\r\nimport { getConversations, getContacts, onConnectChat, getConversation } from '../../redux/slices/privatechat';\r\nimport { getSettingsList } from '../../redux/slices/settings';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\nimport useAuth from '../../hooks/useAuth';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\nimport { ChatSidebar, ChatWindow, ChatAdminMessageForm } from '../../components/_dashboard/privatechat';\r\nimport { serverConfig } from '../../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function PrivateChat() {\r\n  const { themeStretch } = useSettings();\r\n  const dispatch = useDispatch();\r\n  const { user } = useAuth();\r\n  const { opponentId } = useParams();\r\n  const { settingsList } = useSelector((state) => state.setting);\r\n  const chatSettings = settingsList.find((settingRow) => settingRow.type === 'chat');\r\n  const { activeConversationId } = useSelector((state) => state.privatechat);\r\n  const [currentConversationId, setCurrentCoversationId] = useState(null);\r\n\r\n  console.log('Private Chat');\r\n\r\n  useEffect(() => {\r\n    if (opponentId) {\r\n      const lastMessage =\r\n        chatSettings?.settings.admin_message ||\r\n        'Please leave a message, I will reply to you as soon as possible. You may talk about anything: advertising, complaining, suggestions, advice, cooperation, etc.';\r\n      dispatch(onConnectChat(user._id, opponentId, lastMessage));\r\n    }\r\n  }, [dispatch, opponentId]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUserList());\r\n    dispatch(getConversations());\r\n    dispatch(getContacts());\r\n    dispatch(getSettingsList());\r\n  }, [dispatch]);\r\n\r\n  const [socket, setSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/message`, {\r\n      // EIO: 2,\r\n      // reconnect: true,\r\n      transports: ['websocket']\r\n    });\r\n    newSocket.on('connect', () => {\r\n      console.log('Successfully connected');\r\n    });\r\n    newSocket.on('connect_failed', () => {\r\n      console.log('Connection Failed');\r\n    });\r\n    newSocket.on('disconnect', () => {\r\n      console.log('Disconnected');\r\n    });\r\n    newSocket.on('msgReceive', handleReceiveMessage);\r\n    newSocket.on('onDeleted', handleDeleteMessage);\r\n    newSocket.on('onTyping', onTyping);\r\n    setSocket(newSocket);\r\n    return () => newSocket.close();\r\n  }, [setSocket]);\r\n\r\n  useEffect(() => {\r\n    if (socket && activeConversationId) {\r\n      if (currentConversationId && currentConversationId !== activeConversationId) {\r\n        console.log('leaveChat', currentConversationId);\r\n        socket.emit(\r\n          'leaveChat',\r\n          JSON.stringify({\r\n            chatId: currentConversationId\r\n          })\r\n        );\r\n      }\r\n      console.log('joinChat', activeConversationId);\r\n      const params = { chatId: activeConversationId };\r\n      socket.emit('joinChat', JSON.stringify(params));\r\n      setCurrentCoversationId(activeConversationId);\r\n    }\r\n  }, [socket, dispatch, activeConversationId]);\r\n\r\n  const handleReceiveMessage = async (value) => {\r\n    console.log(activeConversationId, value);\r\n    if (activeConversationId) {\r\n      dispatch(getConversation(activeConversationId));\r\n    }\r\n  };\r\n\r\n  const handleDeleteMessage = async (value) => {\r\n    console.log(value);\r\n    dispatch(getConversation(activeConversationId));\r\n  };\r\n\r\n  const onTyping = async (value) => {\r\n    console.log(value);\r\n  };\r\n\r\n  const [roomListSocket, setRoomListSocket] = useState(null);\r\n\r\n  useEffect(() => {\r\n    console.log('RoomList Socket!');\r\n    const newSocket = socketio.connect(`${serverConfig.socketUrl}/api/chatRoomList`, {\r\n      // reconnect: true,\r\n      transports: ['websocket']\r\n    });\r\n    newSocket.on('connect', () => {\r\n      console.log('Successfully connected: api/chatRoomList');\r\n    });\r\n    newSocket.on('updateChatRoomList', handleUpdateChatRoomList);\r\n    setRoomListSocket(newSocket);\r\n    return () => newSocket.close();\r\n  }, [setRoomListSocket]);\r\n\r\n  const handleUpdateChatRoomList = () => {\r\n    console.log('handleUpdateChatRoomList');\r\n    dispatch(getConversations());\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Chat | Locals\">\r\n      <Container maxWidth={themeStretch ? false : 'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Private Chat\"\r\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.root }, { name: 'Private Chat' }]}\r\n        />\r\n        <ChatAdminMessageForm chatSettings={chatSettings} />\r\n        <Card sx={{ height: '72vh', display: 'flex' }}>\r\n          <ChatSidebar />\r\n          {socket && <ChatWindow socket={socket} />}\r\n        </Card>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}