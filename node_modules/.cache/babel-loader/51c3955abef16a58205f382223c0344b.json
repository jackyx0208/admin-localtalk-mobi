{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(back)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\_dashboard\\\\prohibited-words\\\\list\\\\ProhibitedWordMessageForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useSnackbar } from 'notistack5';\nimport { useNavigate } from 'react-router-dom';\nimport { Form, FormikProvider, useFormik } from 'formik'; // material\n\nimport { LoadingButton } from '@material-ui/lab';\nimport { Box, Card, Grid, Stack, Switch, TextField, Typography, FormHelperText, FormControlLabel } from '@material-ui/core'; // utils\n\nimport axios from '../../../../utils/axios';\nimport fakeRequest from '../../../../utils/fakeRequest'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nProhibitedWordMessageForm.propTypes = {\n  prohibitedWordSettings: PropTypes.object\n};\nexport default function ProhibitedWordMessageForm({\n  prohibitedWordSettings\n}) {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const ProhibitedWordMessageSchema = Yup.object().shape({\n    admin_message: Yup.string().required('This field is required')\n  });\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      admin_message: (prohibitedWordSettings === null || prohibitedWordSettings === void 0 ? void 0 : prohibitedWordSettings.settings.admin_message) || 'Your message has contents that violate the \"User Agreement\", please edit it and then send it again.'\n    },\n    validationSchema: ProhibitedWordMessageSchema,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm,\n      setErrors\n    }) => {\n      try {\n        await fakeRequest(500);\n        await axios.put(`/settings/prohibited_word`, values);\n        setSubmitting(false);\n        enqueueSnackbar('Update success', {\n          variant: 'success'\n        });\n      } catch (error) {\n        console.error(error);\n        setSubmitting(false);\n        setErrors(error);\n      }\n    }\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    getFieldProps\n  } = formik;\n  return /*#__PURE__*/_jsxDEV(FormikProvider, {\n    value: formik,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 12,\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            sx: {\n              p: 3\n            },\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              spacing: 3,\n              children: /*#__PURE__*/_jsxDEV(Stack, {\n                direction: {\n                  xs: 'column',\n                  sm: 'row'\n                },\n                spacing: {\n                  xs: 3,\n                  sm: 2\n                },\n                children: [/*#__PURE__*/_jsxDEV(TextField, {\n                  fullWidth: true,\n                  label: \"Admin Message\",\n                  multiline: true,\n                  minRows: 2,\n                  maxRows: 4,\n                  ...getFieldProps('admin_message'),\n                  error: Boolean(touched.message && errors.message),\n                  helperText: touched.message && errors.message\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n                  type: \"submit\",\n                  variant: \"contained\",\n                  loading: isSubmitting,\n                  children: \"Save\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProhibitedWordMessageForm, \"ShlbACjtCU8GDduOfYBiimtQsaY=\", false, function () {\n  return [useNavigate, useSnackbar, useFormik];\n});\n\n_c = ProhibitedWordMessageForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProhibitedWordMessageForm\");","map":{"version":3,"sources":["E:/projects/localtalk.mobi(back)/pro/toptalk-adminpanel/src/components/_dashboard/prohibited-words/list/ProhibitedWordMessageForm.js"],"names":["Yup","PropTypes","useSnackbar","useNavigate","Form","FormikProvider","useFormik","LoadingButton","Box","Card","Grid","Stack","Switch","TextField","Typography","FormHelperText","FormControlLabel","axios","fakeRequest","ProhibitedWordMessageForm","propTypes","prohibitedWordSettings","object","navigate","enqueueSnackbar","ProhibitedWordMessageSchema","shape","admin_message","string","required","formik","enableReinitialize","initialValues","settings","validationSchema","onSubmit","values","setSubmitting","resetForm","setErrors","put","variant","error","console","errors","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","p","xs","sm","Boolean","message"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useSnackbar } from 'notistack5';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n// material\r\nimport { LoadingButton } from '@material-ui/lab';\r\nimport {\r\n  Box,\r\n  Card,\r\n  Grid,\r\n  Stack,\r\n  Switch,\r\n  TextField,\r\n  Typography,\r\n  FormHelperText,\r\n  FormControlLabel\r\n} from '@material-ui/core';\r\n// utils\r\nimport axios from '../../../../utils/axios';\r\nimport fakeRequest from '../../../../utils/fakeRequest';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nProhibitedWordMessageForm.propTypes = {\r\n  prohibitedWordSettings: PropTypes.object\r\n};\r\n\r\nexport default function ProhibitedWordMessageForm({ prohibitedWordSettings }) {\r\n  const navigate = useNavigate();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const ProhibitedWordMessageSchema = Yup.object().shape({\r\n    admin_message: Yup.string().required('This field is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      admin_message:\r\n        prohibitedWordSettings?.settings.admin_message ||\r\n        'Your message has contents that violate the \"User Agreement\", please edit it and then send it again.'\r\n    },\r\n    validationSchema: ProhibitedWordMessageSchema,\r\n    onSubmit: async (values, { setSubmitting, resetForm, setErrors }) => {\r\n      try {\r\n        await fakeRequest(500);\r\n\r\n        await axios.put(`/settings/prohibited_word`, values);\r\n\r\n        setSubmitting(false);\r\n        enqueueSnackbar('Update success', { variant: 'success' });\r\n      } catch (error) {\r\n        console.error(error);\r\n        setSubmitting(false);\r\n        setErrors(error);\r\n      }\r\n    }\r\n  });\r\n\r\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\r\n\r\n  return (\r\n    <FormikProvider value={formik}>\r\n      <Form noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} md={12}>\r\n            <Card sx={{ p: 3 }}>\r\n              <Stack spacing={3}>\r\n                <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 3, sm: 2 }}>\r\n                  <TextField\r\n                    fullWidth\r\n                    label=\"Admin Message\"\r\n                    multiline\r\n                    minRows={2}\r\n                    maxRows={4}\r\n                    {...getFieldProps('admin_message')}\r\n                    error={Boolean(touched.message && errors.message)}\r\n                    helperText={touched.message && errors.message}\r\n                  />\r\n                  <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n                    Save\r\n                  </LoadingButton>\r\n                </Stack>\r\n              </Stack>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Form>\r\n    </FormikProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}