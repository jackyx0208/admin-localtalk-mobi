{"ast":null,"code":"var _jsxFileName = \"E:\\\\projects\\\\localtalk.mobi(back)\\\\pro\\\\toptalk-adminpanel\\\\src\\\\components\\\\_dashboard\\\\mail\\\\MailSendMessageDialog.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport { useState } from 'react'; // material ui\n\nimport { Dialog, DialogTitle, DialogContent, DialogActions, Button, Box, IconButton, Stack, TextField } from '@material-ui/core';\nimport { Close } from '@material-ui/icons';\nimport { Form, FormikProvider, useFormik } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nMailSendMessageDialog.propTypes = {\n  mailAddress: PropTypes.string,\n  message: PropTypes.string,\n  onMessage: PropTypes.func,\n  onSend: PropTypes.func,\n  onClose: PropTypes.func\n};\nexport default function MailSendMessageDialog({\n  mailAddress,\n  message,\n  onMessage,\n  onSend,\n  onClose\n}) {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(true);\n  const formSchema = Yup.object().shape({\n    message: Yup.string().required('This field is required')\n  });\n  const formik = useFormik({\n    enableReinitialize: true,\n    initialValues: {\n      message: message || ''\n    },\n    validationSchema: formSchema\n  });\n  const {\n    errors,\n    values,\n    touched,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue,\n    getFieldProps\n  } = formik;\n  return (\n    /*#__PURE__*/\n    // so it will close the dialog, if we pass it to the onClose attribute.\n    _jsxDEV(Dialog, {\n      open: isOpen,\n      onClose: onClose,\n      maxWidth: \"sm\",\n      fullWidth: true,\n      children: /*#__PURE__*/_jsxDEV(FormikProvider, {\n        value: formik,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          noValidate: true,\n          autoComplete: \"off\",\n          onSubmit: onSend,\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            children: [\"Mail Send to \", mailAddress]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            position: \"absolute\",\n            top: 0,\n            right: 0,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: onClose,\n              children: /*#__PURE__*/_jsxDEV(Close, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              direction: {\n                xs: 'column',\n                sm: 'row'\n              },\n              spacing: {\n                xs: 0,\n                sm: 0\n              },\n              children: [/*#__PURE__*/_jsxDEV(TextField, {\n                type: \"hidden\",\n                name: \"to_email\",\n                value: mailAddress\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TextField, {\n                fullWidth: true,\n                label: \"Message\",\n                multiline: true,\n                minRows: 6,\n                maxRows: 6,\n                onChange: onMessage,\n                value: message,\n                ...getFieldProps('message'),\n                error: Boolean(touched.message && errors.message),\n                helperText: touched.message && errors.message\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: onClose,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"secondary\",\n              variant: \"contained\",\n              type: \"submit\",\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n_s(MailSendMessageDialog, \"eZdBrSh6Ng4JfeBR8F1MhvHZ0Q0=\", false, function () {\n  return [useFormik];\n});\n\n_c = MailSendMessageDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"MailSendMessageDialog\");","map":{"version":3,"sources":["E:/projects/localtalk.mobi(back)/pro/toptalk-adminpanel/src/components/_dashboard/mail/MailSendMessageDialog.js"],"names":["Yup","PropTypes","useState","Dialog","DialogTitle","DialogContent","DialogActions","Button","Box","IconButton","Stack","TextField","Close","Form","FormikProvider","useFormik","MailSendMessageDialog","propTypes","mailAddress","string","message","onMessage","func","onSend","onClose","isOpen","setIsOpen","formSchema","object","shape","required","formik","enableReinitialize","initialValues","validationSchema","errors","values","touched","handleSubmit","isSubmitting","setFieldValue","getFieldProps","xs","sm","Boolean"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n// material ui\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Box,\r\n  IconButton,\r\n  Stack,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport { Close } from '@material-ui/icons';\r\nimport { Form, FormikProvider, useFormik } from 'formik';\r\n\r\nMailSendMessageDialog.propTypes = {\r\n  mailAddress: PropTypes.string,\r\n  message: PropTypes.string,\r\n  onMessage: PropTypes.func,\r\n  onSend: PropTypes.func,\r\n  onClose: PropTypes.func\r\n};\r\n\r\nexport default function MailSendMessageDialog({ mailAddress, message, onMessage, onSend, onClose }) {\r\n  const [isOpen, setIsOpen] = useState(true);\r\n\r\n  const formSchema = Yup.object().shape({\r\n    message: Yup.string().required('This field is required')\r\n  });\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: {\r\n      message: message || ''\r\n    },\r\n    validationSchema: formSchema\r\n  });\r\n\r\n  const { errors, values, touched, handleSubmit, isSubmitting, setFieldValue, getFieldProps } = formik;\r\n\r\n  return (\r\n    // so it will close the dialog, if we pass it to the onClose attribute.\r\n    <Dialog open={isOpen} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n      <FormikProvider value={formik}>\r\n        <Form noValidate autoComplete=\"off\" onSubmit={onSend}>\r\n          <DialogTitle>Mail Send to {mailAddress}</DialogTitle>\r\n          <Box position=\"absolute\" top={0} right={0}>\r\n            <IconButton onClick={onClose}>\r\n              <Close />\r\n            </IconButton>\r\n          </Box>\r\n          <DialogContent>\r\n            <Stack direction={{ xs: 'column', sm: 'row' }} spacing={{ xs: 0, sm: 0 }}>\r\n              <TextField type=\"hidden\" name=\"to_email\" value={mailAddress} />\r\n              <TextField\r\n                fullWidth\r\n                label=\"Message\"\r\n                multiline\r\n                minRows={6}\r\n                maxRows={6}\r\n                onChange={onMessage}\r\n                value={message}\r\n                {...getFieldProps('message')}\r\n                error={Boolean(touched.message && errors.message)}\r\n                helperText={touched.message && errors.message}\r\n              />\r\n            </Stack>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button color=\"primary\" variant=\"contained\" onClick={onClose}>\r\n              Cancel\r\n            </Button>\r\n            <Button color=\"secondary\" variant=\"contained\" type=\"submit\">\r\n              Send\r\n            </Button>\r\n          </DialogActions>\r\n        </Form>\r\n      </FormikProvider>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}